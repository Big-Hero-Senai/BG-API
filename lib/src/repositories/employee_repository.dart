import 'package:logging/logging.dart';
import '../models/employee.dart';
import '../mappers/employee_mapper.dart';
import 'firebase_repository.dart';

// üë• REPOSITORY: CRUD espec√≠fico de Employee
class EmployeeRepository {
  static final _logger = Logger('EmployeeRepository');

  final FirebaseRepository _firebaseRepository = FirebaseRepository();
  static const String _collection = 'employees';

  // üìã LISTAR TODOS - Buscar todos os funcion√°rios
  Future<List<Employee>> getAllEmployees() async {
    try {
      _logger.info('üìã Buscando todos os funcion√°rios');

      // 1. Buscar documentos do Firebase
      final firebaseDocs = await _firebaseRepository.getCollection(_collection);

      // 2. Converter para Employee usando Mapper
      final employees = EmployeeMapper.fromFirebaseList(firebaseDocs);

      _logger.info('‚úÖ ${employees.length} funcion√°rios encontrados');
      return employees;
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar funcion√°rios: $e');
      rethrow;
    }
  }

  // üîç BUSCAR POR ID - Funcion√°rio espec√≠fico
  Future<Employee?> getEmployeeById(String id) async {
    try {
      _logger.info('üîç Buscando funcion√°rio: $id');

      // 1. Buscar documento do Firebase
      final firebaseDoc =
          await _firebaseRepository.getDocument(_collection, id);

      if (firebaseDoc == null) {
        _logger.info('‚ùå Funcion√°rio n√£o encontrado: $id');
        return null;
      }

      // 2. Converter para Employee usando Mapper
      final employee = EmployeeMapper.fromFirebaseFormat(firebaseDoc);

      _logger.info('‚úÖ Funcion√°rio encontrado: ${employee.nome}');
      return employee;
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar funcion√°rio $id: $e');
      rethrow;
    }
  }

  // ‚ûï CRIAR - Novo funcion√°rio
  Future<Employee> createEmployee(Employee employee) async {
    try {
      _logger.info('‚ûï Criando funcion√°rio: ${employee.nome}');

      // 1. Verificar se j√° existe
      final exists =
          await _firebaseRepository.documentExists(_collection, employee.id);
      if (exists) {
        throw EmployeeAlreadyExistsException(
            'Funcion√°rio ${employee.id} j√° existe');
      }

      // 2. Converter para formato Firebase usando Mapper
      final firebaseData = EmployeeMapper.toFirebaseFormat(employee);

      // 3. Salvar no Firebase
      await _firebaseRepository.saveDocument(
          _collection, employee.id, firebaseData);

      _logger.info('‚úÖ Funcion√°rio criado: ${employee.nome}');
      return employee;
    } catch (e) {
      _logger.severe('‚ùå Erro ao criar funcion√°rio: $e');
      rethrow;
    }
  }

  // üîÑ ATUALIZAR - Funcion√°rio existente
  Future<Employee> updateEmployee(Employee employee) async {
    try {
      _logger.info('üîÑ Atualizando funcion√°rio: ${employee.nome}');

      // 1. Verificar se existe
      final exists =
          await _firebaseRepository.documentExists(_collection, employee.id);
      if (!exists) {
        throw EmployeeNotFoundException(
            'Funcion√°rio ${employee.id} n√£o encontrado');
      }

      // 2. Converter para formato Firebase usando Mapper
      final firebaseData = EmployeeMapper.toFirebaseFormat(employee);

      // 3. Atualizar no Firebase
      await _firebaseRepository.saveDocument(
          _collection, employee.id, firebaseData);

      _logger.info('‚úÖ Funcion√°rio atualizado: ${employee.nome}');
      return employee;
    } catch (e) {
      _logger.severe('‚ùå Erro ao atualizar funcion√°rio: $e');
      rethrow;
    }
  }

  // üóëÔ∏è DELETAR - Remover funcion√°rio
  Future<bool> deleteEmployee(String id) async {
    try {
      _logger.info('üóëÔ∏è Deletando funcion√°rio: $id');

      // 1. Verificar se existe
      final exists = await _firebaseRepository.documentExists(_collection, id);
      if (!exists) {
        _logger.warning('‚ö†Ô∏è Tentativa de deletar funcion√°rio inexistente: $id');
        return false;
      }

      // 2. Deletar do Firebase
      final deleted = await _firebaseRepository.deleteDocument(_collection, id);

      if (deleted) {
        _logger.info('‚úÖ Funcion√°rio deletado: $id');
      }

      return deleted;
    } catch (e) {
      _logger.severe('‚ùå Erro ao deletar funcion√°rio $id: $e');
      rethrow;
    }
  }

  // üîç VERIFICAR EXIST√äNCIA - Se funcion√°rio existe
  Future<bool> employeeExists(String id) async {
    try {
      return await _firebaseRepository.documentExists(_collection, id);
    } catch (e) {
      _logger.warning('‚ö†Ô∏è Erro ao verificar exist√™ncia de $id: $e');
      return false;
    }
  }

  // üìß BUSCAR POR EMAIL - Verificar email duplicado
  Future<Employee?> getEmployeeByEmail(String email) async {
    try {
      _logger.info('üìß Buscando funcion√°rio por email: $email');

      // Firebase n√£o suporta queries complexas via REST API facilmente
      // Ent√£o buscamos todos e filtramos (n√£o √© ideal para produ√ß√£o)
      final allEmployees = await getAllEmployees();

      try {
        final employee = allEmployees.firstWhere(
          (emp) => emp.email.toLowerCase() == email.toLowerCase(),
        );

        _logger.info('‚úÖ Funcion√°rio encontrado por email: ${employee.nome}');
        return employee;
      } catch (e) {
        _logger.info('‚ùå Nenhum funcion√°rio encontrado com email: $email');
        return null;
      }
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar por email $email: $e');
      rethrow;
    }
  }

  // üìä ESTAT√çSTICAS - Contar funcion√°rios ativos/inativos
  Future<Map<String, int>> getEmployeeStats() async {
    try {
      final allEmployees = await getAllEmployees();

      final stats = {
        'total': allEmployees.length,
        'ativos': allEmployees.where((emp) => emp.ativo).length,
        'inativos': allEmployees.where((emp) => !emp.ativo).length,
        'veteranos': allEmployees.where((emp) => emp.isVeterano).length,
      };

      _logger.info('üìä Estat√≠sticas: ${stats}');
      return stats;
    } catch (e) {
      _logger.severe('‚ùå Erro ao calcular estat√≠sticas: $e');
      rethrow;
    }
  }

  // üßπ CLEANUP - Fechar recursos
  void dispose() {
    _firebaseRepository.dispose();
  }
}

// üö® EXCEPTIONS espec√≠ficas de Employee
class EmployeeNotFoundException implements Exception {
  final String message;
  EmployeeNotFoundException(this.message);

  @override
  String toString() => 'EmployeeNotFoundException: $message';
}

class EmployeeAlreadyExistsException implements Exception {
  final String message;
  EmployeeAlreadyExistsException(this.message);

  @override
  String toString() => 'EmployeeAlreadyExistsException: $message';
}