// üìÅ lib/src/services/iot_service.dart
// üîß CORRIGIDO: Imports e classe renomeada

import 'package:logging/logging.dart';
import '../models/health_data.dart';
import '../models/location_data.dart';
import '../repositories/iot_repository_v3.dart';
import '../services/employee_service.dart';

// üß† SERVICE V2: L√≥gica inteligente com estrutura hier√°rquica otimizada
class IoTServiceV2 {
  static final _logger = Logger('IoTServiceV2');

  final IoTRepositoryV3 _iotRepository = IoTRepositoryV3();
  final EmployeeService _employeeService = EmployeeService();

  // üíì PROCESSAR DADOS DE SA√öDE - ESTRUTURA OTIMIZADA
  Future<HealthData> processHealthDataV2(Map<String, dynamic> jsonData) async {
    try {
      _logger.info('üíì Processando dados de sa√∫de V2 (otimizado)');

      // üõ°Ô∏è REGRA 1: Validar se funcion√°rio existe
      final employeeId = jsonData['employee_id']?.toString();
      if (employeeId != null) {
        final employee = await _employeeService.getEmployeeById(employeeId);
        if (employee == null) {
          throw Exception('Funcion√°rio $employeeId n√£o encontrado');
        }
      }

      // üõ°Ô∏è REGRA 2: Criar e validar HealthData
      final healthData = HealthData.fromJson(jsonData);

      // üõ°Ô∏è REGRA 3: Verificar alertas cr√≠ticos
      if (healthData.isCriticalAlert) {
        _logger.warning(
            'üö® ALERTA CR√çTICO detectado para ${healthData.employeeId}');
        await _processHealthAlert(healthData);
      }

      // üõ°Ô∏è REGRA 4: Verificar bateria baixa do device
      if (healthData.batteryLevel != null && healthData.batteryLevel! < 20) {
        _logger.warning('üîã Bateria baixa no device ${healthData.deviceId}');
        await _processBatteryAlert(healthData);
      }

      // ‚úÖ SALVAR com estrutura V2 otimizada
      final saved = await _iotRepository.saveHealthData(healthData);

      _logger.info('‚úÖ Dados de sa√∫de V2 processados: ${saved.employeeId}');
      return saved;
    } catch (e) {
      _logger.severe('‚ùå Erro ao processar dados de sa√∫de V2: $e');
      rethrow;
    }
  }

  // üó∫Ô∏è PROCESSAR DADOS DE LOCALIZA√á√ÉO - L√ìGICA INTELIGENTE
  Future<LocationData> processLocationDataV2(
      Map<String, dynamic> jsonData) async {
    try {
      _logger.info('üó∫Ô∏è Processando dados de localiza√ß√£o V2 (inteligente)');

      // üõ°Ô∏è REGRA 1: Validar se funcion√°rio existe
      final employeeId = jsonData['employee_id']?.toString();
      if (employeeId != null) {
        final employee = await _employeeService.getEmployeeById(employeeId);
        if (employee == null) {
          throw Exception('Funcion√°rio $employeeId n√£o encontrado');
        }
      }

      // üõ°Ô∏è REGRA 2: Criar e validar LocationData
      final newLocationData = LocationData.fromJson(jsonData);

      // üß† L√ìGICA INTELIGENTE: Verificar se deve salvar hist√≥rico
      await _processLocationIntelligently(newLocationData);

      // ‚úÖ SEMPRE salvar como localiza√ß√£o atual (sobrescreve)
      final saved = await _iotRepository.saveCurrentLocation(newLocationData);

      _logger.info('‚úÖ Localiza√ß√£o V2 processada: ${saved.employeeId}');
      return saved;
    } catch (e) {
      _logger.severe('‚ùå Erro ao processar localiza√ß√£o V2: $e');
      rethrow;
    }
  }

  // üß† L√ìGICA INTELIGENTE: Decidir se salva no hist√≥rico
  Future<void> _processLocationIntelligently(LocationData newLocation) async {
    try {
      // Buscar localiza√ß√£o anterior
      final previousLocation =
          await _iotRepository.getCurrentLocation(newLocation.employeeId);

      if (previousLocation == null) {
        // Primeira localiza√ß√£o - sempre salvar
        await _iotRepository.saveLocationHistory(newLocation, 'first_location');
        _logger.info('üìç Primeira localiza√ß√£o salva no hist√≥rico');
        return;
      }

      // üß† DECIS√ïES INTELIGENTES:

      // 1. Verificar mudan√ßa de zona
      if (_zoneMudou(previousLocation, newLocation)) {
        await _iotRepository.saveLocationHistory(newLocation, 'zone_change');
        _logger.info('üó∫Ô∏è Mudan√ßa de zona detectada - salvo no hist√≥rico');
        return;
      }

      // 2. Verificar dist√¢ncia significativa (> 50 metros)
      final distance = _calculateDistance(previousLocation, newLocation);
      if (distance != null && distance > 50.0) {
        await _iotRepository.saveLocationHistory(
            newLocation, 'significant_movement');
        _logger.info(
            'üìè Movimento significativo detectado: ${distance.toStringAsFixed(1)}m');
        return;
      }

      // 3. Verificar tempo desde √∫ltima atualiza√ß√£o (> 30 minutos)
      final timeDiff =
          newLocation.timestamp.difference(previousLocation.timestamp);
      if (timeDiff.inMinutes > 30) {
        await _iotRepository.saveLocationHistory(newLocation, 'time_interval');
        _logger.info(
            '‚è∞ Intervalo de tempo atingido: ${timeDiff.inMinutes} minutos');
        return;
      }

      // 4. N√£o salvar - mudan√ßa n√£o significativa
      _logger.info('‚è≠Ô∏è Localiza√ß√£o n√£o significativa - s√≥ atualiza atual');
    } catch (e) {
      _logger.warning('‚ö†Ô∏è Erro na l√≥gica inteligente: $e');
      // Em caso de erro, salvar mesmo assim para n√£o perder dados
      await _iotRepository.saveLocationHistory(newLocation, 'error_fallback');
    }
  }

  // üìè Calcular dist√¢ncia entre duas localiza√ß√µes
  double? _calculateDistance(LocationData loc1, LocationData loc2) {
    if (!loc1.hasValidCoordinates || !loc2.hasValidCoordinates) {
      return null;
    }

    try {
      final lat2 = double.parse(loc2.latitude!);
      final lon2 = double.parse(loc2.longitude!);

      // Usar m√©todo existente do LocationData
      return loc1.distanceToPoint(lat2.toString(), lon2.toString());
    } catch (e) {
      _logger.warning('‚ö†Ô∏è Erro ao calcular dist√¢ncia: $e');
      return null;
    }
  }

  // üó∫Ô∏è Verificar se mudou de zona
  bool _zoneMudou(LocationData previous, LocationData current) {
    final previousZone = previous.processedZone ?? _determineZone(previous);
    final currentZone = current.processedZone ?? _determineZone(current);

    if (previousZone != null && currentZone != null) {
      return previousZone != currentZone;
    }

    return false;
  }

  // üó∫Ô∏è Determinar zona baseada em coordenadas
  String? _determineZone(LocationData locationData) {
    if (!locationData.hasValidCoordinates) return null;

    try {
      final lat = double.parse(locationData.latitude!);
      final lon = double.parse(locationData.longitude!);

      // Zonas da f√°brica SENAI (coordenadas fict√≠cias)
      if (lat >= -3.7320 &&
          lat <= -3.7300 &&
          lon >= -38.5270 &&
          lon <= -38.5250) {
        return 'setor_producao';
      } else if (lat >= -3.7340 &&
          lat <= -3.7320 &&
          lon >= -38.5290 &&
          lon <= -38.5270) {
        return 'almoxarifado';
      } else if (lat >= -3.7300 &&
          lat <= -3.7280 &&
          lon >= -38.5250 &&
          lon <= -38.5230) {
        return 'administrativo';
      }

      return 'area_externa';
    } catch (e) {
      return null;
    }
  }

  // üîç BUSCAR DADOS - M√âTODOS OTIMIZADOS V2

  // Buscar √∫ltimos dados de sa√∫de (V2 otimizado)
  Future<List<HealthData>> getLatestHealthDataV2(String employeeId,
      {int limit = 10}) async {
    try {
      return await _iotRepository.getHealthDataByEmployee(employeeId,
          limit: limit);
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar dados de sa√∫de V2: $e');
      return [];
    }
  }

  // Buscar localiza√ß√£o atual (V2 super r√°pido)
  Future<LocationData?> getCurrentLocationV2(String employeeId) async {
    try {
      return await _iotRepository.getCurrentLocation(employeeId);
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar localiza√ß√£o atual V2: $e');
      return null;
    }
  }

  // Buscar todas as localiza√ß√µes atuais (V2 eficiente)
  Future<List<LocationData>> getAllCurrentLocationsV2() async {
    try {
      final locationsMap = await _iotRepository.getAllCurrentLocations();
      return locationsMap.values.toList();
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar todas localiza√ß√µes V2: $e');
      return [];
    }
  }

  // Buscar hist√≥rico de localiza√ß√£o
  Future<List<LocationData>> getLocationHistoryV2(String employeeId,
      {int limit = 50}) async {
    try {
      return await _iotRepository.getLocationHistory(employeeId, limit: limit);
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar hist√≥rico de localiza√ß√£o V2: $e');
      return [];
    }
  }

  // Estat√≠sticas IoT V2 otimizadas
  Future<Map<String, dynamic>> getIoTStatisticsV2() async {
    try {
      _logger.info('üìä Gerando estat√≠sticas IoT V2 (otimizadas)');

      final stats = <String, dynamic>{};

      // Estat√≠sticas b√°sicas
      stats['timestamp'] = DateTime.now().toUtc().toIso8601String();
      stats['version'] = 'V2';

      // Contadores eficientes
      final allLocations = await getAllCurrentLocationsV2();
      stats['active_employees'] = allLocations.length;

      // Distribui√ß√£o por zonas
      final zoneDistribution = <String, int>{};
      for (final location in allLocations) {
        final zone =
            location.processedZone ?? _determineZone(location) ?? 'unknown';
        zoneDistribution[zone] = (zoneDistribution[zone] ?? 0) + 1;
      }
      stats['zone_distribution'] = zoneDistribution;

      // Alertas ativos (simplificado)
      stats['active_alerts'] = 0; // Implementar se necess√°rio

      _logger.info('‚úÖ Estat√≠sticas V2 geradas');
      return stats;
    } catch (e) {
      _logger.severe('‚ùå Erro ao gerar estat√≠sticas V2: $e');
      return {'error': e.toString()};
    }
  }

  // Teste de performance V1 vs V2
  Future<Map<String, dynamic>> performanceTest(String employeeId) async {
    try {
      _logger.info('üß™ Iniciando teste de performance V2 para $employeeId');

      final stopwatch = Stopwatch()..start();

      // Teste V2 - buscar dados de sa√∫de
      final healthData = await getLatestHealthDataV2(employeeId, limit: 5);
      final healthTime = stopwatch.elapsedMilliseconds;

      stopwatch.reset();

      // Teste V2 - buscar localiza√ß√£o atual
      final currentLocation = await getCurrentLocationV2(employeeId);
      final locationTime = stopwatch.elapsedMilliseconds;

      stopwatch.stop();

      return {
        'employee_id': employeeId,
        'version': 'V2',
        'health_data': {
          'count': healthData.length,
          'time_ms': healthTime,
        },
        'current_location': {
          'found': currentLocation != null,
          'time_ms': locationTime,
        },
        'total_time_ms': healthTime + locationTime,
        'timestamp': DateTime.now().toUtc().toIso8601String(),
      };
    } catch (e) {
      _logger.severe('‚ùå Erro no teste de performance V2: $e');
      return {
        'error': e.toString(),
        'employee_id': employeeId,
        'version': 'V2',
        'timestamp': DateTime.now().toUtc().toIso8601String(),
      };
    }
  }

  // üö® M√âTODOS DE ALERTA (implementa√ß√µes b√°sicas)

  Future<void> _processHealthAlert(HealthData healthData) async {
    try {
      _logger.warning(
          'üö® Processando alerta de sa√∫de para ${healthData.employeeId}');

      // Implementar l√≥gica de alerta de sa√∫de
      // Por exemplo: notificar supervisores, criar registro de alerta, etc.

      _logger.info('‚úÖ Alerta de sa√∫de processado');
    } catch (e) {
      _logger.severe('‚ùå Erro ao processar alerta de sa√∫de: $e');
    }
  }

  Future<void> _processBatteryAlert(HealthData healthData) async {
    try {
      _logger.warning(
          'üîã Processando alerta de bateria para device ${healthData.deviceId}');

      // Implementar l√≥gica de alerta de bateria
      // Por exemplo: notificar t√©cnicos, agendar manuten√ß√£o, etc.

      _logger.info('‚úÖ Alerta de bateria processado');
    } catch (e) {
      _logger.severe('‚ùå Erro ao processar alerta de bateria: $e');
    }
  }

  // üßπ LIMPEZA E DISPOSE
  void dispose() {
    _logger.info('üßπ Liberando recursos do IoTServiceV2');
    _iotRepository.dispose();
  }
}
