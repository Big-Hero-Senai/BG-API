// üéØ EMPLOYEE MODEL - VERS√ÉO FINAL
// Sistema de Monitoramento SENAI - Pulseiras IoT

// üìñ ENUM: Setores da empresa
enum Setor {
  producao('Produ√ß√£o'),
  manutencao('Manuten√ß√£o'), 
  qualidade('Qualidade'),
  administrativo('Administrativo'),
  seguranca('Seguran√ßa');
  
  const Setor(this.displayName);
  final String displayName;
  
  static Setor fromString(String value) {
    switch (value.toLowerCase()) {
      case 'producao':
      case 'produ√ß√£o':
        return Setor.producao;
      case 'manutencao':
      case 'manuten√ß√£o':
        return Setor.manutencao;
      case 'qualidade':
        return Setor.qualidade;
      case 'administrativo':
        return Setor.administrativo;
      case 'seguranca':
      case 'seguran√ßa':
        return Setor.seguranca;
      default:
        throw ArgumentError('Setor inv√°lido: $value');
    }
  }
}

// üë§ CLASSE PRINCIPAL: Funcion√°rio
class Employee {
  // üîí DADOS IMUT√ÅVEIS (identidade)
  final String id;
  final String nome;
  final DateTime dataAdmissao;
  
  // üîÑ DADOS MUT√ÅVEIS (situa√ß√£o atual)
  String email;
  Setor setor;
  bool ativo;
  
  // üèóÔ∏è CONSTRUCTOR COM VALIDA√á√ïES
  Employee({
    required this.id,
    required this.nome,
    required this.dataAdmissao,
    required this.email,
    required this.setor,
    this.ativo = true,
  }) {
    // Valida√ß√µes cr√≠ticas
    if (id.trim().isEmpty || id.length < 3) {
      throw ArgumentError('‚ùå ID deve ter pelo menos 3 caracteres');
    }
    if (nome.trim().isEmpty || nome.trim().length < 2) {
      throw ArgumentError('‚ùå Nome deve ter pelo menos 2 caracteres');
    }
    if (!_isValidEmail(email)) {
      throw ArgumentError('‚ùå Email inv√°lido: $email');
    }
    if (dataAdmissao.isAfter(DateTime.now())) {
      throw ArgumentError('‚ùå Data de admiss√£o n√£o pode ser no futuro');
    }
  }
  
  // üè≠ FACTORY: Criar a partir de JSON
  factory Employee.fromJson(Map<String, dynamic> json) {
    try {
      return Employee(
        id: json['id']?.toString() ?? '',
        nome: json['nome']?.toString() ?? '',
        email: json['email']?.toString() ?? '',
        setor: Setor.fromString(json['setor']?.toString() ?? ''),
        dataAdmissao: DateTime.parse(json['data_admissao']?.toString() ?? ''),
        ativo: json['ativo'] == true,
      );
    } catch (e) {
      throw ArgumentError('‚ùå Erro ao converter JSON: $e');
    }
  }
  
  // üì§ CONVERS√ÉO PARA JSON
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'nome': nome,
      'email': email,
      'setor': setor.name,
      'setor_display': setor.displayName,
      'data_admissao': dataAdmissao.toIso8601String(),
      'ativo': ativo,
      'tempo_empresa_anos': tempoEmpresaAnos,
      'is_veterano': isVeterano,
      'status': statusDetalhado,
      'timestamp': DateTime.now().toIso8601String(),
    };
  }
  
  Map<String, dynamic> toJsonCompact() {
    return {
      'id': id,
      'nome': nome,
      'email': email,
      'setor': setor.name,
      'ativo': ativo,
    };
  }
  
  // üîß M√âTODOS DE ATUALIZA√á√ÉO
  void atualizarEmail(String novoEmail) {
    if (!_isValidEmail(novoEmail)) {
      throw ArgumentError('‚ùå Email inv√°lido: $novoEmail');
    }
    email = novoEmail;
  }
  
  void transferirSetor(Setor novoSetor, {String? motivo}) {
    setor = novoSetor;
  }
  
  void ativar() => ativo = true;
  void desativar({String? motivo}) => ativo = false;
  
  // üìä GETTERS CALCULADOS
  int get tempoEmpresaAnos {
    final diferenca = DateTime.now().difference(dataAdmissao);
    return (diferenca.inDays / 365).floor();
  }
  
  bool get isVeterano => tempoEmpresaAnos >= 5;
  
  String get statusDetalhado {
    final status = ativo ? 'üü¢ Conectado' : 'üî¥ Desconectado';
    return '$status | ${setor.displayName}';
  }
  
  // üîç VALIDA√á√ÉO PRIVADA
  bool _isValidEmail(String email) {
    return RegExp(r'^[^@\s]+@[^@\s]+\.[^@\s]+$').hasMatch(email);
  }
  
  // üìã DEBUG
  @override
  String toString() {
    return 'Employee(${id}: ${nome}, ${setor.displayName}, ${ativo ? "ativo" : "inativo"})';
  }
  
  @override
  bool operator ==(Object other) {
    return identical(this, other) || (other is Employee && other.id == id);
  }
  
  @override
  int get hashCode => id.hashCode;
}