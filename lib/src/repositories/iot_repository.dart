// üìÅ lib/src/repositories/iot_repository.dart

import 'package:logging/logging.dart';
import '../models/health_data.dart';
import '../models/location_data.dart';
import '../mappers/iot_mapper.dart';
import 'firebase_repository.dart';

// üì° REPOSITORY: Persist√™ncia espec√≠fica de dados IoT
class IoTRepository {
  static final _logger = Logger('IoTRepository');
  
  final FirebaseRepository _firebaseRepository = FirebaseRepository();
  
  // Cole√ß√µes Firebase para dados IoT
  static const String _healthCollection = 'health_data';
  static const String _locationCollection = 'location_data';
  static const String _alertsCollection = 'alerts';
  
  // üíì HEALTH DATA OPERATIONS
  
  // Salvar dados de sa√∫de
  Future<HealthData> saveHealthData(HealthData healthData) async {
    try {
      _logger.info('üíì Salvando dados de sa√∫de: ${healthData.employeeId}');
      
      // Gerar ID √∫nico para o registro IoT
      final docId = _generateIoTDocumentId('health', healthData);
      
      // Converter para formato Firebase
      final firebaseData = IoTMapper.healthDataToFirebase(healthData);
      
      // Salvar no Firebase
      await _firebaseRepository.saveDocument(_healthCollection, docId, firebaseData);
      
      // Marcar como processado
      healthData.markAsProcessed();
      
      _logger.info('‚úÖ Dados de sa√∫de salvos: $docId');
      return healthData;
    } catch (e) {
      _logger.severe('‚ùå Erro ao salvar dados de sa√∫de: $e');
      rethrow;
    }
  }
  
  // Buscar dados de sa√∫de por funcion√°rio
  Future<List<HealthData>> getHealthDataByEmployee(String employeeId, {int limit = 10}) async {
    try {
      _logger.info('üîç Buscando dados de sa√∫de para: $employeeId');
      
      // Buscar todos os documentos da cole√ß√£o
      final firebaseDocs = await _firebaseRepository.getCollection(_healthCollection);
      
      // Filtrar por employee_id e ordenar por timestamp (mais recente primeiro)
      final employeeHealthData = <HealthData>[];
      
      for (final doc in firebaseDocs) {
        try {
          final healthData = IoTMapper.healthDataFromFirebase(doc);
          if (healthData.employeeId == employeeId) {
            employeeHealthData.add(healthData);
          }
        } catch (e) {
          _logger.warning('‚ö†Ô∏è Erro ao converter documento de sa√∫de: $e');
        }
      }
      
      // Ordenar por timestamp (mais recente primeiro) e limitar
      employeeHealthData.sort((a, b) => b.timestamp.compareTo(a.timestamp));
      
      final result = employeeHealthData.take(limit).toList();
      _logger.info('‚úÖ ${result.length} registros de sa√∫de encontrados');
      
      return result;
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar dados de sa√∫de: $e');
      rethrow;
    }
  }
  
  // Estat√≠sticas de dados de sa√∫de
  Future<Map<String, int>> getHealthDataStats() async {
    try {
      final firebaseDocs = await _firebaseRepository.getCollection(_healthCollection);
      
      int total = 0;
      int alertsCritical = 0;
      int batteryLow = 0;
      int last24h = 0;
      
      final yesterday = DateTime.now().subtract(Duration(hours: 24));
      
      for (final doc in firebaseDocs) {
        try {
          final healthData = IoTMapper.healthDataFromFirebase(doc);
          total++;
          
          if (healthData.isCriticalAlert) alertsCritical++;
          if (healthData.isLowBattery) batteryLow++;
          if (healthData.timestamp.isAfter(yesterday)) last24h++;
        } catch (e) {
          // Continua processando outros documentos
        }
      }
      
      return {
        'total_readings': total,
        'critical_alerts': alertsCritical,
        'low_battery_devices': batteryLow,
        'readings_24h': last24h,
      };
    } catch (e) {
      _logger.severe('‚ùå Erro ao calcular estat√≠sticas de sa√∫de: $e');
      rethrow;
    }
  }
  
  // Contar registros de sa√∫de por per√≠odo
  Future<int> getHealthDataCount({int hours = 24}) async {
    try {
      final firebaseDocs = await _firebaseRepository.getCollection(_healthCollection);
      final cutoff = DateTime.now().subtract(Duration(hours: hours));
      
      int count = 0;
      for (final doc in firebaseDocs) {
        try {
          final healthData = IoTMapper.healthDataFromFirebase(doc);
          if (healthData.timestamp.isAfter(cutoff)) {
            count++;
          }
        } catch (e) {
          // Continua contando
        }
      }
      
      return count;
    } catch (e) {
      _logger.warning('‚ö†Ô∏è Erro ao contar dados de sa√∫de: $e');
      return 0;
    }
  }
  
  // üó∫Ô∏è LOCATION DATA OPERATIONS
  
  // Salvar dados de localiza√ß√£o
  Future<LocationData> saveLocationData(LocationData locationData) async {
    try {
      _logger.info('üó∫Ô∏è Salvando dados de localiza√ß√£o: ${locationData.employeeId}');
      
      // Gerar ID √∫nico para o registro IoT
      final docId = _generateIoTDocumentId('location', locationData);
      
      // Converter para formato Firebase
      final firebaseData = IoTMapper.locationDataToFirebase(locationData);
      
      // Salvar no Firebase
      await _firebaseRepository.saveDocument(_locationCollection, docId, firebaseData);
      
      // Marcar como processado
      locationData.markAsProcessed();
      
      _logger.info('‚úÖ Dados de localiza√ß√£o salvos: $docId');
      return locationData;
    } catch (e) {
      _logger.severe('‚ùå Erro ao salvar dados de localiza√ß√£o: $e');
      rethrow;
    }
  }
  
  // Buscar dados de localiza√ß√£o por funcion√°rio
  Future<List<LocationData>> getLocationDataByEmployee(String employeeId, {int limit = 10}) async {
    try {
      _logger.info('üîç Buscando dados de localiza√ß√£o para: $employeeId');
      
      // Buscar todos os documentos da cole√ß√£o
      final firebaseDocs = await _firebaseRepository.getCollection(_locationCollection);
      
      // Filtrar por employee_id
      final employeeLocationData = <LocationData>[];
      
      for (final doc in firebaseDocs) {
        try {
          final locationData = IoTMapper.locationDataFromFirebase(doc);
          if (locationData.employeeId == employeeId) {
            employeeLocationData.add(locationData);
          }
        } catch (e) {
          _logger.warning('‚ö†Ô∏è Erro ao converter documento de localiza√ß√£o: $e');
        }
      }
      
      // Ordenar por timestamp (mais recente primeiro) e limitar
      employeeLocationData.sort((a, b) => b.timestamp.compareTo(a.timestamp));
      
      final result = employeeLocationData.take(limit).toList();
      _logger.info('‚úÖ ${result.length} registros de localiza√ß√£o encontrados');
      
      return result;
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar dados de localiza√ß√£o: $e');
      rethrow;
    }
  }
  
  // Estat√≠sticas de dados de localiza√ß√£o
  Future<Map<String, int>> getLocationDataStats() async {
    try {
      final firebaseDocs = await _firebaseRepository.getCollection(_locationCollection);
      
      int total = 0;
      int withCoordinates = 0;
      int last24h = 0;
      final Map<String, int> zoneDistribution = {};
      
      final yesterday = DateTime.now().subtract(Duration(hours: 24));
      
      for (final doc in firebaseDocs) {
        try {
          final locationData = IoTMapper.locationDataFromFirebase(doc);
          total++;
          
          if (locationData.hasValidCoordinates) withCoordinates++;
          if (locationData.timestamp.isAfter(yesterday)) last24h++;
          
          // Contar distribui√ß√£o por zona
          final zone = locationData.processedZone ?? 'unknown';
          zoneDistribution[zone] = (zoneDistribution[zone] ?? 0) + 1;
        } catch (e) {
          // Continua processando
        }
      }
      
      return {
        'total_readings': total,
        'with_coordinates': withCoordinates,
        'readings_24h': last24h,
        'zones': zoneDistribution.length,
      };
    } catch (e) {
      _logger.severe('‚ùå Erro ao calcular estat√≠sticas de localiza√ß√£o: $e');
      rethrow;
    }
  }
  
  // Contar registros de localiza√ß√£o por per√≠odo
  Future<int> getLocationDataCount({int hours = 24}) async {
    try {
      final firebaseDocs = await _firebaseRepository.getCollection(_locationCollection);
      final cutoff = DateTime.now().subtract(Duration(hours: hours));
      
      int count = 0;
      for (final doc in firebaseDocs) {
        try {
          final locationData = IoTMapper.locationDataFromFirebase(doc);
          if (locationData.timestamp.isAfter(cutoff)) {
            count++;
          }
        } catch (e) {
          // Continua contando
        }
      }
      
      return count;
    } catch (e) {
      _logger.warning('‚ö†Ô∏è Erro ao contar dados de localiza√ß√£o: $e');
      return 0;
    }
  }
  
  // üö® ALERTS OPERATIONS
  
  // Salvar alerta
  Future<void> saveAlert(Map<String, dynamic> alert) async {
    try {
      _logger.info('üö® Salvando alerta: ${alert['type']}');
      
      // Gerar ID √∫nico para o alerta
      final alertId = '${alert['type']}_${alert['employee_id']}_${DateTime.now().millisecondsSinceEpoch}';
      
      // Converter para formato Firebase
      final firebaseData = IoTMapper.alertToFirebase(alert);
      
      // Salvar no Firebase
      await _firebaseRepository.saveDocument(_alertsCollection, alertId, firebaseData);
      
      _logger.info('‚úÖ Alerta salvo: $alertId');
    } catch (e) {
      _logger.severe('‚ùå Erro ao salvar alerta: $e');
      rethrow;
    }
  }
  
  // Buscar alertas ativos
  Future<List<Map<String, dynamic>>> getActiveAlerts() async {
    try {
      _logger.info('üö® Buscando alertas ativos');
      
      final firebaseDocs = await _firebaseRepository.getCollection(_alertsCollection);
      final activeAlerts = <Map<String, dynamic>>[];
      
      for (final doc in firebaseDocs) {
        try {
          final alert = IoTMapper.alertFromFirebase(doc);
          if (alert['status'] == 'active') {
            activeAlerts.add(alert);
          }
        } catch (e) {
          _logger.warning('‚ö†Ô∏è Erro ao converter alerta: $e');
        }
      }
      
      // Ordenar por timestamp (mais recente primeiro)
      activeAlerts.sort((a, b) {
        final timestampA = DateTime.parse(a['timestamp']);
        final timestampB = DateTime.parse(b['timestamp']);
        return timestampB.compareTo(timestampA);
      });
      
      _logger.info('‚úÖ ${activeAlerts.length} alertas ativos encontrados');
      return activeAlerts;
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar alertas ativos: $e');
      rethrow;
    }
  }
  
  // Contar alertas ativos
  Future<int> getActiveAlertsCount() async {
    try {
      final alerts = await getActiveAlerts();
      return alerts.length;
    } catch (e) {
      _logger.warning('‚ö†Ô∏è Erro ao contar alertas ativos: $e');
      return 0;
    }
  }
  
  // üì± DEVICE OPERATIONS
  
  // Contar devices ativos (que enviaram dados nas √∫ltimas 2 horas)
  Future<int> getActiveDevicesCount() async {
    try {
      final cutoff = DateTime.now().subtract(Duration(hours: 2));
      final activeDevices = <String>{};
      
      // Verificar devices de sa√∫de
      final healthDocs = await _firebaseRepository.getCollection(_healthCollection);
      for (final doc in healthDocs) {
        try {
          final healthData = IoTMapper.healthDataFromFirebase(doc);
          if (healthData.timestamp.isAfter(cutoff)) {
            activeDevices.add(healthData.deviceId);
          }
        } catch (e) {
          // Continua processando
        }
      }
      
      // Verificar devices de localiza√ß√£o
      final locationDocs = await _firebaseRepository.getCollection(_locationCollection);
      for (final doc in locationDocs) {
        try {
          final locationData = IoTMapper.locationDataFromFirebase(doc);
          if (locationData.timestamp.isAfter(cutoff)) {
            activeDevices.add(locationData.deviceId);
          }
        } catch (e) {
          // Continua processando
        }
      }
      
      return activeDevices.length;
    } catch (e) {
      _logger.warning('‚ö†Ô∏è Erro ao contar devices ativos: $e');
      return 0;
    }
  }
  
  // üîß UTILITY METHODS
  
  // Gerar ID √∫nico para documentos IoT
  String _generateIoTDocumentId(String type, dynamic data) {
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    
    if (data is HealthData) {
      return '${type}_${data.employeeId}_${data.deviceId}_$timestamp';
    } else if (data is LocationData) {
      return '${type}_${data.employeeId}_${data.deviceId}_$timestamp';
    }
    
    return '${type}_$timestamp';
  }
  
  // üßπ CLEANUP
  void dispose() {
    _firebaseRepository.dispose();
    _logger.info('üßπ IoTRepository disposed');
  }
}

/*
üéì CONCEITOS DO IOT REPOSITORY:

1. üì° **IoT-Specific Collections**
   - health_data: dados de sa√∫de
   - location_data: dados de localiza√ß√£o  
   - alerts: sistema de alertas

2. üîç **Efficient Filtering**
   - Filtragem por employeeId
   - Ordena√ß√£o por timestamp
   - Limita√ß√£o de resultados

3. üìä **Real-time Statistics**
   - Contadores por per√≠odo
   - Distribui√ß√£o por zonas
   - Devices ativos

4. üö® **Alert Management**
   - Persist√™ncia de alertas
   - Status tracking
   - Recupera√ß√£o de alertas ativos

5. üè∑Ô∏è **Document ID Strategy**
   - IDs √∫nicos com timestamp
   - Identifica√ß√£o por tipo
   - Rastreabilidade completa

6. üõ°Ô∏è **Error Resilience**
   - Continua processando mesmo com erros
   - Logs detalhados
   - Fallbacks para contadores
*/