# üê≥ Dockerfile - SENAI Monitoring API V2.1.0
# Otimizado para produ√ß√£o no Fly.io

# ===========================================
# üèóÔ∏è STAGE 1: BUILD STAGE
# ===========================================
FROM dart:stable AS build

# Metadata
LABEL maintainer="SENAI Monitoring API V2.1.0"
LABEL description="IoT Monitoring System with Hierarchical Architecture"
LABEL version="2.1.0"

# Configurar diret√≥rio de trabalho
WORKDIR /app

# Copiar pubspec files primeiro (para cache das depend√™ncias)
COPY pubspec.yaml pubspec.lock ./

# Instalar depend√™ncias
RUN dart pub get

# Copiar c√≥digo fonte
COPY . .

# Verificar c√≥digo
RUN dart analyze --fatal-infos

# Executar testes (opcional, pode ser removido para deploy mais r√°pido)
# RUN dart test

# Compilar aplica√ß√£o para produ√ß√£o
RUN dart compile exe bin/server.dart -o bin/server

# ===========================================
# üöÄ STAGE 2: PRODUCTION STAGE
# ===========================================
FROM debian:bullseye-slim AS production

# Instalar depend√™ncias do sistema necess√°rias
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Criar usu√°rio n√£o-root para seguran√ßa
RUN useradd -r -s /bin/false senaiapp

# Configurar diret√≥rio de trabalho
WORKDIR /app

# Copiar execut√°vel compilado do stage de build
COPY --from=build /app/bin/server /app/server

# Copiar arquivos necess√°rios em runtime (se houver)
COPY --from=build /app/.env.example /app/.env.example

# Ajustar permiss√µes
RUN chown -R senaiapp:senaiapp /app
RUN chmod +x /app/server

# Configurar usu√°rio
USER senaiapp

# Configurar vari√°veis de ambiente para produ√ß√£o
ENV NODE_ENV=production
ENV PORT=8080
ENV HOST=0.0.0.0

# Expor porta
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Comando para iniciar a aplica√ß√£o
CMD ["/app/server"]