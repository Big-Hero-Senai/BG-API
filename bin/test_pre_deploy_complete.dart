// üìÅ bin/test_pre_deploy_complete.dart
// Teste completo e abrangente pr√©-deploy para validar TODOS os endpoints

import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;

void main() async {
  print('üöÄ TESTE COMPLETO PR√â-DEPLOY - API V2.1.0');
  print('============================================');
  print('üéØ Validando TODOS os endpoints antes do deploy Fly.io');
  print('');
  
  const baseUrl = 'http://localhost:8080';
  // const baseUrl = 'https://senai-monitoring-api.fly.dev';
  var testsExecuted = 0;
  var testsSuccess = 0;
  var testsFailed = 0;
  
  try {
    print('üìã PLANO DE TESTES:');
    print('‚úÖ 1. Health checks e documenta√ß√£o');
    print('‚úÖ 2. CRUD funcion√°rios');
    print('‚úÖ 3. IoT endpoints (sa√∫de + localiza√ß√£o)');
    print('‚úÖ 4. Consultas e dashboard');
    print('‚úÖ 5. Performance e estat√≠sticas');
    print('‚úÖ 6. Cen√°rios de erro');
    print('‚úÖ 7. M√∫ltiplos funcion√°rios');
    print('‚úÖ 8. Zone detection avan√ßada');
    print('');

    // ===========================================
    // üîß 1. HEALTH CHECKS E DOCUMENTA√á√ÉO
    // ===========================================
    print('üîß 1. TESTANDO HEALTH CHECKS E DOCUMENTA√á√ÉO');
    print('===========================================');
    
    // Health check geral
    testsExecuted++;
    final healthCheck = await testEndpoint('GET', '$baseUrl/health', null, 'Health Check Geral');
    if (healthCheck) testsSuccess++; else testsFailed++;
    
    // Documenta√ß√£o interativa
    testsExecuted++;
    final docs = await testEndpoint('GET', '$baseUrl/', null, 'Documenta√ß√£o Interativa');
    if (docs) testsSuccess++; else testsFailed++;
    
    await Future.delayed(Duration(milliseconds: 500));

    // ===========================================
    // üë• 2. CRUD FUNCION√ÅRIOS
    // ===========================================
    print('\nüë• 2. TESTANDO CRUD FUNCION√ÅRIOS');
    print('==============================');
    
    // Listar funcion√°rios
    testsExecuted++;
    final employeesList = await testEndpoint('GET', '$baseUrl/api/employees', null, 'Listar Funcion√°rios');
    if (employeesList) testsSuccess++; else testsFailed++;
    
    // Estat√≠sticas funcion√°rios
    testsExecuted++;
    final employeesStats = await testEndpoint('GET', '$baseUrl/api/employees-stats', null, 'Estat√≠sticas Funcion√°rios');
    if (employeesStats) testsSuccess++; else testsFailed++;
    
    // Buscar funcion√°rio espec√≠fico
    testsExecuted++;
    final employeeById = await testEndpoint('GET', '$baseUrl/api/employees/EMP001', null, 'Funcion√°rio por ID');
    if (employeeById) testsSuccess++; else testsFailed++;
    
    await Future.delayed(Duration(milliseconds: 500));

    // ===========================================
    // üì° 3. IOT ENDPOINTS (SA√öDE + LOCALIZA√á√ÉO)
    // ===========================================
    print('\nüì° 3. TESTANDO IOT ENDPOINTS');
    print('===========================');
    
    // Teste endpoint IoT
    testsExecuted++;
    final iotTest = await testEndpoint('POST', '$baseUrl/api/iot/test', {}, 'Teste IoT Endpoint');
    if (iotTest) testsSuccess++; else testsFailed++;
    
    // Dados de sa√∫de para m√∫ltiplos funcion√°rios
    final healthDataTests = [
      {'employee_id': 'EMP001', 'device_id': 'DEVICE_001', 'heart_rate': 75, 'body_temperature': 36.5, 'battery_level': 85},
      {'employee_id': 'EMP003', 'device_id': 'DEVICE_003', 'heart_rate': 68, 'body_temperature': 36.2, 'battery_level': 92},
      {'employee_id': 'EMP004', 'device_id': 'DEVICE_004', 'heart_rate': 82, 'body_temperature': 36.8, 'battery_level': 78},
    ];
    
    for (final healthData in healthDataTests) {
      testsExecuted++;
      final fullHealthData = {
        ...healthData,
        'timestamp': DateTime.now().toIso8601String(),
        'oxygen_saturation': 98,
      };
      final result = await testEndpoint('POST', '$baseUrl/api/iot/health', fullHealthData, 'Sa√∫de ${healthData['employee_id']}');
      if (result) testsSuccess++; else testsFailed++;
      await Future.delayed(Duration(milliseconds: 200));
    }
    
    // Dados de localiza√ß√£o para m√∫ltiplos funcion√°rios (diferentes zonas)
    final locationDataTests = [
      {'employee_id': 'EMP001', 'device_id': 'DEVICE_001', 'latitude': '-3.7319', 'longitude': '-38.5267'}, // setor_producao
      {'employee_id': 'EMP003', 'device_id': 'DEVICE_003', 'latitude': '-3.7330', 'longitude': '-38.5280'}, // almoxarifado  
      {'employee_id': 'EMP004', 'device_id': 'DEVICE_004', 'latitude': '-3.7290', 'longitude': '-38.5240'}, // administrativo
    ];
    
    for (final locationData in locationDataTests) {
      testsExecuted++;
      final fullLocationData = {
        ...locationData,
        'timestamp': DateTime.now().toIso8601String(),
      };
      final result = await testEndpoint('POST', '$baseUrl/api/iot/location', fullLocationData, 'Localiza√ß√£o ${locationData['employee_id']}');
      if (result) testsSuccess++; else testsFailed++;
      await Future.delayed(Duration(milliseconds: 200));
    }
    
    // Aguardar processamento
    print('‚è≥ Aguardando processamento dos dados...');
    await Future.delayed(Duration(seconds: 2));

    // ===========================================
    // üîç 4. CONSULTAS E DASHBOARD
    // ===========================================
    print('\nüîç 4. TESTANDO CONSULTAS E DASHBOARD');
    print('===================================');
    
    // Consultas de sa√∫de por funcion√°rio
    for (final employeeId in ['EMP001', 'EMP003', 'EMP004']) {
      testsExecuted++;
      final result = await testEndpoint('GET', '$baseUrl/api/iot/health/$employeeId', null, 'Consulta Sa√∫de $employeeId');
      if (result) testsSuccess++; else testsFailed++;
    }
    
    // Consultas de localiza√ß√£o por funcion√°rio
    for (final employeeId in ['EMP001', 'EMP003', 'EMP004']) {
      testsExecuted++;
      final result = await testEndpoint('GET', '$baseUrl/api/iot/location/$employeeId', null, 'Consulta Localiza√ß√£o $employeeId');
      if (result) testsSuccess++; else testsFailed++;
    }
    
    // Dashboard de todas as localiza√ß√µes
    testsExecuted++;
    final allLocations = await testEndpoint('GET', '$baseUrl/api/iot/locations-all', null, 'Dashboard Todas Localiza√ß√µes');
    if (allLocations) testsSuccess++; else testsFailed++;

    // ===========================================
    // üìä 5. PERFORMANCE E ESTAT√çSTICAS
    // ===========================================
    print('\nüìä 5. TESTANDO PERFORMANCE E ESTAT√çSTICAS');
    print('=========================================');
    
    // Estat√≠sticas IoT
    testsExecuted++;
    final iotStats = await testEndpoint('GET', '$baseUrl/api/iot/stats', null, 'Estat√≠sticas IoT');
    if (iotStats) testsSuccess++; else testsFailed++;
    
    // Estat√≠sticas sistema
    testsExecuted++;
    final systemStats = await testEndpoint('GET', '$baseUrl/api/stats', null, 'Estat√≠sticas Sistema');
    if (systemStats) testsSuccess++; else testsFailed++;
    
    // Teste de performance para cada funcion√°rio
    for (final employeeId in ['EMP001', 'EMP003', 'EMP004']) {
      testsExecuted++;
      final result = await testEndpoint('GET', '$baseUrl/api/iot/performance-test/$employeeId', null, 'Performance Test $employeeId');
      if (result) testsSuccess++; else testsFailed++;
    }
    
    // Configura√ß√µes do sistema
    testsExecuted++;
    final configTest = await testEndpoint('POST', '$baseUrl/api/iot/config', {
      'v2_optimized_mode': true,
      'zone_detection': true
    }, 'Configura√ß√µes Sistema');
    if (configTest) testsSuccess++; else testsFailed++;

    // ===========================================
    // ‚ùå 6. CEN√ÅRIOS DE ERRO
    // ===========================================
    print('\n‚ùå 6. TESTANDO CEN√ÅRIOS DE ERRO');
    print('==============================');
    
    // Funcion√°rio inexistente
    testsExecuted++;
    final invalidEmployee = await testEndpoint('GET', '$baseUrl/api/iot/health/EMP999', null, 'Funcion√°rio Inexistente', expectError: true);
    if (invalidEmployee) testsSuccess++; else testsFailed++;
    
    // Dados inv√°lidos
    testsExecuted++;
    final invalidHealthData = await testEndpoint('POST', '$baseUrl/api/iot/health', {
      'invalid_field': 'invalid_value'
    }, 'Dados Sa√∫de Inv√°lidos', expectError: true);
    if (invalidHealthData) testsSuccess++; else testsFailed++;
    
    // Endpoint inexistente
    testsExecuted++;
    final invalidEndpoint = await testEndpoint('GET', '$baseUrl/api/invalid/endpoint', null, 'Endpoint Inexistente', expectError: true);
    if (invalidEndpoint) testsSuccess++; else testsFailed++;

    // ===========================================
    // üìà 7. TESTES DE CARGA SIMPLES
    // ===========================================
    print('\nüìà 7. TESTE DE CARGA SIMPLES');
    print('============================');
    
    print('üöÄ Enviando 10 requisi√ß√µes simult√¢neas...');
    final loadTestFutures = <Future>[];
    
    for (int i = 0; i < 10; i++) {
      loadTestFutures.add(
        http.get(Uri.parse('$baseUrl/api/iot/stats'))
      );
    }
    
    final stopwatch = Stopwatch()..start();
    final loadTestResults = await Future.wait(loadTestFutures);
    stopwatch.stop();
    
    final successfulRequests = loadTestResults.where((r) => r.statusCode == 200).length;
    print('‚úÖ $successfulRequests/10 requisi√ß√µes bem-sucedidas');
    print('‚è±Ô∏è Tempo total: ${stopwatch.elapsedMilliseconds}ms');
    print('üìä M√©dia por requisi√ß√£o: ${(stopwatch.elapsedMilliseconds / 10).toStringAsFixed(1)}ms');
    
    testsExecuted++;
    if (successfulRequests >= 8) { // 80% de sucesso √© aceit√°vel
      testsSuccess++;
      print('‚úÖ Teste de carga: PASSOU');
    } else {
      testsFailed++;
      print('‚ùå Teste de carga: FALHOU');
    }

    // ===========================================
    // üìã 8. VALIDA√á√ÉO FINAL DE DADOS
    // ===========================================
    print('\nüìã 8. VALIDA√á√ÉO FINAL DE DADOS');
    print('==============================');
    
    // Verificar se todas as localiza√ß√µes est√£o sendo retornadas
    final locationsResponse = await http.get(Uri.parse('$baseUrl/api/iot/locations-all'));
    if (locationsResponse.statusCode == 200) {
      final locationsData = jsonDecode(locationsResponse.body);
      final locationsList = locationsData['data'] as List;
      print('üìç Localiza√ß√µes encontradas: ${locationsList.length}');
      
      // Verificar zones detectadas
      for (final location in locationsList) {
        final employeeId = location['employee_id'];
        final lat = double.tryParse(location['latitude'] ?? '0');
        final lon = double.tryParse(location['longitude'] ?? '0');
        print('üë§ $employeeId: ($lat, $lon)');
      }
    }
    
    // Verificar estat√≠sticas finais
    final finalStatsResponse = await http.get(Uri.parse('$baseUrl/api/iot/stats'));
    if (finalStatsResponse.statusCode == 200) {
      final statsData = jsonDecode(finalStatsResponse.body);
      final stats = statsData['data']['statistics'];
      print('üìä Funcion√°rios ativos: ${stats['active_employees']}');
      print('üó∫Ô∏è Distribui√ß√£o por zonas: ${stats['zone_distribution']}');
    }

    // ===========================================
    // üìà RELAT√ìRIO FINAL
    // ===========================================
    print('\nüéØ RELAT√ìRIO FINAL PR√â-DEPLOY');
    print('============================');
    print('üìä Testes executados: $testsExecuted');
    print('‚úÖ Testes com sucesso: $testsSuccess');
    print('‚ùå Testes falharam: $testsFailed');
    print('üìà Taxa de sucesso: ${(testsSuccess / testsExecuted * 100).toStringAsFixed(1)}%');
    print('');
    
    if (testsFailed == 0) {
      print('üéâ TODOS OS TESTES PASSARAM!');
      print('üöÄ API V2.1.0 PRONTA PARA DEPLOY NO FLY.IO!');
      print('');
      print('‚úÖ Endpoints validados: ${testsSuccess}');
      print('‚úÖ Performance confirmada');
      print('‚úÖ Error handling funcionando');
      print('‚úÖ Multiple employees testados');
      print('‚úÖ Zone detection operacional');
      print('‚úÖ Load testing aprovado');
      exit(0);
    } else {
      print('‚ö†Ô∏è ALGUNS TESTES FALHARAM!');
      print('üîß Corrija os problemas antes do deploy');
      print('‚ùå Falhas: $testsFailed/$testsExecuted');
      exit(1);
    }
    
  } catch (error) {
    print('üí• ERRO CR√çTICO NO TESTE: $error');
    exit(1);
  }
}

// Fun√ß√£o auxiliar para testar endpoints
Future<bool> testEndpoint(
  String method, 
  String url, 
  Map<String, dynamic>? body, 
  String description,
  {bool expectError = false}
) async {
  try {
    print('üß™ $description...');
    
    http.Response response;
    
    if (method == 'GET') {
      response = await http.get(Uri.parse(url));
    } else if (method == 'POST') {
      response = await http.post(
        Uri.parse(url),
        headers: {'Content-Type': 'application/json'},
        body: body != null ? jsonEncode(body) : '{}',
      );
    } else {
      throw Exception('M√©todo HTTP n√£o suportado: $method');
    }
    
    final isSuccess = expectError 
        ? (response.statusCode >= 400) 
        : (response.statusCode >= 200 && response.statusCode < 300);
    
    if (isSuccess) {
      print('   ‚úÖ Status: ${response.statusCode} - PASSOU');
      
      // Tentar parsing JSON para validar resposta
      try {
        final responseData = jsonDecode(response.body);
        if (responseData is Map && responseData.containsKey('success')) {
          print('   üìä Success: ${responseData['success']}');
        }
      } catch (e) {
        // Resposta n√£o √© JSON, tudo bem
      }
      
      return true;
    } else {
      print('   ‚ùå Status: ${response.statusCode} - FALHOU');
      print('   üìã Response: ${response.body.length > 200 ? response.body.substring(0, 200) + "..." : response.body}');
      return false;
    }
    
  } catch (e) {
    print('   üí• ERRO: $e');
    return false;
  }
}