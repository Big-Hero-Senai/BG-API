import 'dart:convert';
import 'package:shelf/shelf.dart';
import 'package:logging/logging.dart';
import '../services/employee_service.dart'; // ‚úÖ MUDAN√áA: Usar EmployeeService
import '../utils/response_helper.dart';

// üéØ CONTROLLER ATUALIZADO: Usando nova arquitetura em camadas
class EmployeeController {
  static final _logger = Logger('EmployeeController');
  final EmployeeService _employeeService =
      EmployeeService(); // ‚úÖ MUDAN√áA: Service em vez de FirebaseService

  // üìã GET /api/employees - Lista todos os funcion√°rios
  Future<Response> getAllEmployees(Request request) async {
    try {
      _logger.info('üìã GET /api/employees - Listando funcion√°rios');

      // ‚úÖ MUDAN√áA: Usar EmployeeService (que j√° tem regras de neg√≥cio)
      final employees = await _employeeService.getAllEmployees();
      final employeesJson = employees.map((e) => e.toJson()).toList();

      _logger.info('‚úÖ ${employees.length} funcion√°rios encontrados');

      return ResponseHelper.listSuccess(employeesJson);
    } catch (e) {
      _logger.severe('‚ùå Erro ao listar funcion√°rios: $e');
      return ResponseHelper.internalError(details: e.toString());
    }
  }

  // üîç GET /api/employees/:id - Busca funcion√°rio por ID
  Future<Response> getEmployeeById(Request request, String id) async {
    try {
      _logger.info('üîç GET /api/employees/$id - Buscando funcion√°rio');

      // ‚úÖ MUDAN√áA: EmployeeService j√° faz valida√ß√£o do ID internamente
      final employee = await _employeeService.getEmployeeById(id);

      if (employee == null) {
        return ResponseHelper.employeeNotFound(id);
      }

      _logger.info('‚úÖ Funcion√°rio encontrado: ${employee.nome}');
      return ResponseHelper.employeeSuccess(employee.toJson());
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar funcion√°rio $id: $e');

      // ‚úÖ MELHORIA: Tratar diferentes tipos de erro
      if (e.toString().contains('InvalidEmployeeDataException')) {
        return ResponseHelper.badRequest(
            e.toString().replaceAll('InvalidEmployeeDataException: ', ''));
      }

      return ResponseHelper.internalError(details: e.toString());
    }
  }

  // ‚ûï POST /api/employees - Cria novo funcion√°rio
  Future<Response> createEmployee(Request request) async {
    try {
      _logger.info('‚ûï POST /api/employees - Criando funcion√°rio');

      // Ler e validar JSON
      final body = await request.readAsString();
      if (body.isEmpty) {
        return ResponseHelper.badRequest('Corpo da requisi√ß√£o vazio');
      }

      Map<String, dynamic> json;
      try {
        json = jsonDecode(body);
      } catch (e) {
        return ResponseHelper.badRequest('JSON inv√°lido',
            details: e.toString());
      }

      // ‚úÖ MUDAN√áA: EmployeeService j√° faz todas as valida√ß√µes
      final created = await _employeeService.createEmployee(json);

      _logger.info('‚úÖ Funcion√°rio criado: ${created.nome}');
      return ResponseHelper.employeeCreated(created.toJson());
    } catch (e) {
      _logger.severe('‚ùå Erro ao criar funcion√°rio: $e');

      // ‚úÖ MELHORIA: Tratamento espec√≠fico de exce√ß√µes de neg√≥cio
      final errorMessage = e.toString();

      if (errorMessage.contains('InvalidEmployeeDataException')) {
        return ResponseHelper.badRequest(
            errorMessage.replaceAll('InvalidEmployeeDataException: ', ''));
      }

      if (errorMessage.contains('DuplicateEmployeeException')) {
        return ResponseHelper.conflict(
            errorMessage.replaceAll('DuplicateEmployeeException: ', ''));
      }

      if (errorMessage.contains('BusinessRuleException')) {
        return ResponseHelper.validationError(
            errorMessage.replaceAll('BusinessRuleException: ', ''));
      }

      return ResponseHelper.internalError(details: e.toString());
    }
  }

  // üîÑ PUT /api/employees/:id - Atualiza funcion√°rio
  Future<Response> updateEmployee(Request request, String id) async {
    try {
      _logger.info('üîÑ PUT /api/employees/$id - Atualizando funcion√°rio');

      // Ler e validar JSON
      final body = await request.readAsString();
      if (body.isEmpty) {
        return ResponseHelper.badRequest('Corpo da requisi√ß√£o vazio');
      }

      Map<String, dynamic> json;
      try {
        json = jsonDecode(body);
      } catch (e) {
        return ResponseHelper.badRequest('JSON inv√°lido',
            details: e.toString());
      }

      // ‚úÖ MUDAN√áA: EmployeeService j√° faz todas as valida√ß√µes e regras de neg√≥cio
      final updated = await _employeeService.updateEmployee(id, json);

      _logger.info('‚úÖ Funcion√°rio atualizado: ${updated.nome}');
      return ResponseHelper.employeeUpdated(updated.toJson());
    } catch (e) {
      _logger.severe('‚ùå Erro ao atualizar funcion√°rio $id: $e');

      // ‚úÖ MELHORIA: Tratamento espec√≠fico de exce√ß√µes
      final errorMessage = e.toString();

      if (errorMessage.contains('EmployeeNotFoundException')) {
        return ResponseHelper.employeeNotFound(id);
      }

      if (errorMessage.contains('InvalidEmployeeDataException')) {
        return ResponseHelper.badRequest(
            errorMessage.replaceAll('InvalidEmployeeDataException: ', ''));
      }

      if (errorMessage.contains('DuplicateEmployeeException')) {
        return ResponseHelper.conflict(
            errorMessage.replaceAll('DuplicateEmployeeException: ', ''));
      }

      if (errorMessage.contains('BusinessRuleException')) {
        return ResponseHelper.validationError(
            errorMessage.replaceAll('BusinessRuleException: ', ''));
      }

      return ResponseHelper.internalError(details: e.toString());
    }
  }

  // üóëÔ∏è DELETE /api/employees/:id - Remove funcion√°rio
  Future<Response> deleteEmployee(Request request, String id) async {
    try {
      _logger.info('üóëÔ∏è DELETE /api/employees/$id - Removendo funcion√°rio');

      // ‚úÖ MUDAN√áA: EmployeeService j√° faz todas as valida√ß√µes
      final deleted = await _employeeService.deleteEmployee(id);

      if (deleted) {
        _logger.info('‚úÖ Funcion√°rio removido: $id');
        return ResponseHelper.employeeDeleted(id);
      } else {
        return ResponseHelper.internalError(
            details: 'Falha ao remover funcion√°rio');
      }
    } catch (e) {
      _logger.severe('‚ùå Erro ao deletar funcion√°rio $id: $e');

      // ‚úÖ MELHORIA: Tratamento espec√≠fico de exce√ß√µes
      final errorMessage = e.toString();

      if (errorMessage.contains('EmployeeNotFoundException')) {
        return ResponseHelper.employeeNotFound(id);
      }

      if (errorMessage.contains('InvalidEmployeeDataException')) {
        return ResponseHelper.badRequest(
            errorMessage.replaceAll('InvalidEmployeeDataException: ', ''));
      }

      if (errorMessage.contains('BusinessRuleException')) {
        return ResponseHelper.validationError(
            errorMessage.replaceAll('BusinessRuleException: ', ''));
      }

      return ResponseHelper.internalError(details: e.toString());
    }
  }

  // üìä GET /api/employees/stats - Estat√≠sticas (novo endpoint)
  Future<Response> getEmployeeStats(Request request) async {
    try {
      _logger
          .info('üìä GET /api/employees/stats - Estat√≠sticas de funcion√°rios');

      final stats = await _employeeService.getStatistics();

      _logger.info('‚úÖ Estat√≠sticas calculadas');
      return ResponseHelper.success(
          data: stats, message: 'Estat√≠sticas calculadas com sucesso');
    } catch (e) {
      _logger.severe('‚ùå Erro ao calcular estat√≠sticas: $e');
      return ResponseHelper.internalError(details: e.toString());
    }
  }

  // üßπ CLEANUP - Limpeza de recursos
  void dispose() {
    _employeeService.dispose();
    _logger.info('üßπ EmployeeController disposed');
  }
}