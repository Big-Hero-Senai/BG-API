// üìÅ lib/src/controllers/iot_controller.dart

import 'dart:convert';
import 'package:shelf/shelf.dart';
import 'package:logging/logging.dart';
import '../models/health_data.dart';
import '../models/location_data.dart';
import '../services/iot_service.dart';
import '../utils/response_helper.dart';

// üì° CONTROLLER: Endpoints para receber dados IoT das pulseiras
class IoTController {
  static final _logger = Logger('IoTController');
  final IoTService _iotService = IoTService();
  
  // üíì POST /api/iot/health - Receber dados de sa√∫de
  Future<Response> receiveHealthData(Request request) async {
    try {
      _logger.info('üíì POST /api/iot/health - Recebendo dados de sa√∫de');
      
      // Ler JSON da pulseira
      final body = await request.readAsString();
      if (body.isEmpty) {
        return ResponseHelper.badRequest('Dados de sa√∫de vazios');
      }
      
      Map<String, dynamic> json;
      try {
        json = jsonDecode(body);
      } catch (e) {
        return ResponseHelper.badRequest('JSON de sa√∫de inv√°lido', details: e.toString());
      }
      
      // Processar dados atrav√©s do service
      final healthData = await _iotService.processHealthData(json);
      
      _logger.info('‚úÖ Dados de sa√∫de processados: ${healthData.employeeId}');
      
      return ResponseHelper.created(
        healthData.toJson(),
        message: 'Dados de sa√∫de recebidos e processados'
      );
    } catch (e) {
      _logger.severe('‚ùå Erro ao processar dados de sa√∫de: $e');
      return _handleIoTError(e);
    }
  }
  
  // üó∫Ô∏è POST /api/iot/location - Receber dados de localiza√ß√£o
  Future<Response> receiveLocationData(Request request) async {
    try {
      _logger.info('üó∫Ô∏è POST /api/iot/location - Recebendo dados de localiza√ß√£o');
      
      // Ler JSON da pulseira
      final body = await request.readAsString();
      if (body.isEmpty) {
        return ResponseHelper.badRequest('Dados de localiza√ß√£o vazios');
      }
      
      Map<String, dynamic> json;
      try {
        json = jsonDecode(body);
      } catch (e) {
        return ResponseHelper.badRequest('JSON de localiza√ß√£o inv√°lido', details: e.toString());
      }
      
      // Processar dados atrav√©s do service
      final locationData = await _iotService.processLocationData(json);
      
      _logger.info('‚úÖ Dados de localiza√ß√£o processados: ${locationData.employeeId}');
      
      return ResponseHelper.created(
        locationData.toJson(),
        message: 'Dados de localiza√ß√£o recebidos e processados'
      );
    } catch (e) {
      _logger.severe('‚ùå Erro ao processar dados de localiza√ß√£o: $e');
      return _handleIoTError(e);
    }
  }
  
  // üìä POST /api/iot/batch - Receber m√∫ltiplos dados (batch)
  Future<Response> receiveBatchData(Request request) async {
    try {
      _logger.info('üìä POST /api/iot/batch - Recebendo dados em lote');
      
      // Ler JSON com array de dados
      final body = await request.readAsString();
      if (body.isEmpty) {
        return ResponseHelper.badRequest('Dados em lote vazios');
      }
      
      List<dynamic> jsonArray;
      try {
        jsonArray = jsonDecode(body);
      } catch (e) {
        return ResponseHelper.badRequest('JSON de lote inv√°lido', details: e.toString());
      }
      
      if (jsonArray.isEmpty) {
        return ResponseHelper.badRequest('Array de dados vazio');
      }
      
      // Processar dados em lote
      final result = await _iotService.processBatchData(jsonArray);
      
      _logger.info('‚úÖ Lote processado: ${result['processed']} itens');
      
      return ResponseHelper.created(
        result,
        message: 'Dados em lote processados com sucesso'
      );
    } catch (e) {
      _logger.severe('‚ùå Erro ao processar dados em lote: $e');
      return _handleIoTError(e);
    }
  }
  
  // üîç GET /api/iot/health/:employeeId - √öltimos dados de sa√∫de
  Future<Response> getEmployeeHealthData(Request request, String employeeId) async {
    try {
      _logger.info('üîç GET /api/iot/health/$employeeId - Buscando dados de sa√∫de');
      
      final healthData = await _iotService.getLatestHealthData(employeeId);
      
      if (healthData.isEmpty) {
        return ResponseHelper.notFound('Dados de sa√∫de', id: employeeId);
      }
      
      return ResponseHelper.listSuccess(
        healthData.map((h) => h.toJson()).toList(),
        message: 'Dados de sa√∫de encontrados'
      );
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar dados de sa√∫de: $e');
      return ResponseHelper.internalError(details: e.toString());
    }
  }
  
  // üó∫Ô∏è GET /api/iot/location/:employeeId - √öltimos dados de localiza√ß√£o
  Future<Response> getEmployeeLocationData(Request request, String employeeId) async {
    try {
      _logger.info('üó∫Ô∏è GET /api/iot/location/$employeeId - Buscando dados de localiza√ß√£o');
      
      final locationData = await _iotService.getLatestLocationData(employeeId);
      
      if (locationData.isEmpty) {
        return ResponseHelper.notFound('Dados de localiza√ß√£o', id: employeeId);
      }
      
      return ResponseHelper.listSuccess(
        locationData.map((l) => l.toJson()).toList(),
        message: 'Dados de localiza√ß√£o encontrados'
      );
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar dados de localiza√ß√£o: $e');
      return ResponseHelper.internalError(details: e.toString());
    }
  }
  
  // üìä GET /api/iot/stats - Estat√≠sticas dos dados IoT
  Future<Response> getIoTStats(Request request) async {
    try {
      _logger.info('üìä GET /api/iot/stats - Estat√≠sticas IoT');
      
      final stats = await _iotService.getIoTStatistics();
      
      return ResponseHelper.success(
        data: stats,
        message: 'Estat√≠sticas IoT calculadas'
      );
    } catch (e) {
      _logger.severe('‚ùå Erro ao calcular estat√≠sticas IoT: $e');
      return ResponseHelper.internalError(details: e.toString());
    }
  }
  
  // üö® GET /api/iot/alerts - Alertas ativos
  Future<Response> getActiveAlerts(Request request) async {
    try {
      _logger.info('üö® GET /api/iot/alerts - Buscando alertas ativos');
      
      final alerts = await _iotService.getActiveAlerts();
      
      return ResponseHelper.listSuccess(
        alerts,
        message: '${alerts.length} alertas encontrados'
      );
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar alertas: $e');
      return ResponseHelper.internalError(details: e.toString());
    }
  }
  
  // üß™ POST /api/iot/test - Endpoint de teste para desenvolvimento
  Future<Response> testIoTEndpoint(Request request) async {
    try {
      _logger.info('üß™ POST /api/iot/test - Teste IoT');
      
      // Dados de teste para simular pulseira
      final testData = {
        'message': 'Endpoint IoT funcionando!',
        'timestamp': DateTime.now().toIso8601String(),
        'examples': {
          'health_data': {
            'employee_id': 'EMP001',
            'device_id': 'DEVICE_001',
            'timestamp': DateTime.now().toIso8601String(),
            'heart_rate': 75,
            'body_temperature': 36.5,
            'battery_level': 85,
          },
          'location_data': {
            'employee_id': 'EMP001',
            'device_id': 'DEVICE_001',
            'timestamp': DateTime.now().toIso8601String(),
            'latitude': '-3.7319',
            'longitude': '-38.5267',
          }
        },
        'endpoints': [
          'POST /api/iot/health',
          'POST /api/iot/location',
          'POST /api/iot/batch',
          'GET /api/iot/health/:employeeId',
          'GET /api/iot/location/:employeeId',
          'GET /api/iot/stats',
          'GET /api/iot/alerts',
        ]
      };
      
      return ResponseHelper.success(
        data: testData,
        message: 'Endpoint de teste IoT funcionando'
      );
    } catch (e) {
      _logger.severe('‚ùå Erro no teste IoT: $e');
      return ResponseHelper.internalError(details: e.toString());
    }
  }
  
  // üõ°Ô∏è TRATAMENTO DE ERROS IoT ESPEC√çFICOS
  Response _handleIoTError(dynamic error) {
    final errorMessage = error.toString();
    
    // Erros de valida√ß√£o dos models
    if (errorMessage.contains('ArgumentError')) {
      return ResponseHelper.badRequest(
        'Dados IoT inv√°lidos',
        details: errorMessage.replaceAll('ArgumentError: ', '')
      );
    }
    
    // Erros de employee n√£o encontrado
    if (errorMessage.contains('EmployeeNotFoundException')) {
      return ResponseHelper.notFound(
        'Funcion√°rio',
        id: 'Verifique employee_id'
      );
    }
    
    // Erros de device n√£o reconhecido
    if (errorMessage.contains('DeviceNotFoundException')) {
      return ResponseHelper.badRequest(
        'Device ID n√£o reconhecido',
        details: 'Verifique device_id'
      );
    }
    
    // Erro gen√©rico
    return ResponseHelper.internalError(details: errorMessage);
  }
  
  // üßπ CLEANUP
  void dispose() {
    _iotService.dispose();
    _logger.info('üßπ IoTController disposed');
  }
}

/*
üéì CONCEITOS DO IOT CONTROLLER:

1. üì° **IoT-Specific Endpoints**
   - Recep√ß√£o de dados de sensores
   - Processamento em tempo real
   - Batch processing para efici√™ncia

2. üõ°Ô∏è **Robust Error Handling**
   - Valida√ß√£o espec√≠fica para IoT
   - Tratamento de dados malformados
   - Respostas apropriadas para devices

3. üìä **Real-time Operations**
   - Dados de sa√∫de cr√≠ticos
   - Localiza√ß√£o para seguran√ßa
   - Alertas autom√°ticos

4. üîç **Data Retrieval**
   - √öltimos dados por funcion√°rio
   - Estat√≠sticas agregadas
   - Sistema de alertas

5. üß™ **Development Support**
   - Endpoint de teste
   - Exemplos de formato
   - Debug information

6. üìã **IoT Best Practices**
   - Logs espec√≠ficos para rastreamento
   - Processamento ass√≠ncrono
   - Valida√ß√£o de device/employee
*/