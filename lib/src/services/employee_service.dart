import 'package:logging/logging.dart';
import '../models/employee.dart';
import '../repositories/employee_repository.dart';
import '../services/validation_service.dart';

// üß† SERVICE: Regras de neg√≥cio de Employee
class EmployeeService {
  static final _logger = Logger('EmployeeService');

  final EmployeeRepository _repository = EmployeeRepository();

  // üìã LISTAR TODOS - Com regras de neg√≥cio
  Future<List<Employee>> getAllEmployees() async {
    try {
      _logger.info('üìã Listando funcion√°rios (com regras de neg√≥cio)');

      final employees = await _repository.getAllEmployees();

      // üìä REGRA: Log estat√≠sticas para monitoramento
      if (employees.isNotEmpty) {
        final ativos = employees.where((e) => e.ativo).length;
        final veteranos = employees.where((e) => e.isVeterano).length;
        _logger.info(
            'üìä Status: $ativos ativos, $veteranos veteranos de ${employees.length} total');
      }

      return employees;
    } catch (e) {
      _logger.severe('‚ùå Erro no service ao listar funcion√°rios: $e');
      rethrow;
    }
  }

  // üîç BUSCAR POR ID - Com valida√ß√£o
  Future<Employee?> getEmployeeById(String id) async {
    try {
      _logger.info('üîç Buscando funcion√°rio: $id');

      // üõ°Ô∏è REGRA: Validar ID antes de buscar
      final idValidation = ValidationService.validateEmployeeId(id);
      if (!idValidation.isValid) {
        throw InvalidEmployeeDataException(
            'ID inv√°lido: ${idValidation.error}');
      }

      return await _repository.getEmployeeById(id);
    } catch (e) {
      _logger.severe('‚ùå Erro no service ao buscar funcion√°rio $id: $e');
      rethrow;
    }
  }

  // ‚ûï CRIAR - Com todas as valida√ß√µes de neg√≥cio
  Future<Employee> createEmployee(Map<String, dynamic> employeeData) async {
    try {
      _logger.info('‚ûï Criando funcion√°rio com regras de neg√≥cio');

      // üõ°Ô∏è REGRA 1: Validar dados de entrada
      final validation =
          ValidationService.validateEmployeeCreation(employeeData);
      if (!validation.isValid) {
        throw InvalidEmployeeDataException(validation.error!,
            details: validation.details);
      }

      // üõ°Ô∏è REGRA 2: Criar Employee (com valida√ß√µes internas)
      Employee employee;
      try {
        employee = Employee.fromJson(employeeData);
      } catch (e) {
        throw InvalidEmployeeDataException('Erro ao criar Employee: $e');
      }

      // üõ°Ô∏è REGRA 3: Verificar email duplicado
      final existingByEmail =
          await _repository.getEmployeeByEmail(employee.email);
      if (existingByEmail != null) {
        throw DuplicateEmployeeException(
            'Email ${employee.email} j√° est√° em uso pelo funcion√°rio ${existingByEmail.id}');
      }

      // üõ°Ô∏è REGRA 4: Verificar ID duplicado
      final existsById = await _repository.employeeExists(employee.id);
      if (existsById) {
        throw DuplicateEmployeeException('ID ${employee.id} j√° existe');
      }

      // üõ°Ô∏è REGRA 5: Valida√ß√µes de neg√≥cio espec√≠ficas
      _validateBusinessRules(employee);

      // ‚úÖ Criar no repository
      final created = await _repository.createEmployee(employee);

      _logger.info('‚úÖ Funcion√°rio criado com sucesso: ${created.nome}');
      return created;
    } catch (e) {
      _logger.severe('‚ùå Erro no service ao criar funcion√°rio: $e');
      rethrow;
    }
  }

  // üîÑ ATUALIZAR - Com valida√ß√µes de neg√≥cio
  Future<Employee> updateEmployee(
      String id, Map<String, dynamic> updateData) async {
    try {
      _logger.info('üîÑ Atualizando funcion√°rio: $id');

      // üõ°Ô∏è REGRA 1: Validar ID
      final idValidation = ValidationService.validateEmployeeId(id);
      if (!idValidation.isValid) {
        throw InvalidEmployeeDataException(
            'ID inv√°lido: ${idValidation.error}');
      }

      // üõ°Ô∏è REGRA 2: Buscar funcion√°rio existente
      final existing = await _repository.getEmployeeById(id);
      if (existing == null) {
        throw EmployeeNotFoundException('Funcion√°rio $id n√£o encontrado');
      }

      // üõ°Ô∏è REGRA 3: Validar dados de atualiza√ß√£o
      final validation = ValidationService.validateEmployeeUpdate(updateData);
      if (!validation.isValid) {
        throw InvalidEmployeeDataException(validation.error!,
            details: validation.details);
      }

      // üõ°Ô∏è REGRA 4: Verificar email duplicado (se email est√° sendo alterado)
      if (updateData.containsKey('email')) {
        final newEmail = updateData['email'].toString();
        if (newEmail != existing.email) {
          final existingByEmail =
              await _repository.getEmployeeByEmail(newEmail);
          if (existingByEmail != null && existingByEmail.id != id) {
            throw DuplicateEmployeeException(
                'Email $newEmail j√° est√° em uso pelo funcion√°rio ${existingByEmail.id}');
          }
        }
      }

      // üîÑ Aplicar atualiza√ß√µes usando m√©todos seguros do Employee
      try {
        if (updateData.containsKey('email')) {
          existing.atualizarEmail(updateData['email'].toString());
        }

        if (updateData.containsKey('setor')) {
          final novoSetor = Setor.fromString(updateData['setor'].toString());
          existing.transferirSetor(novoSetor, motivo: 'atualiza√ß√£o via API');
        }

        if (updateData.containsKey('ativo')) {
          if (updateData['ativo'] == true) {
            existing.ativar();
          } else {
            existing.desativar(motivo: 'desativa√ß√£o via API');
          }
        }
      } catch (e) {
        throw InvalidEmployeeDataException('Erro ao aplicar atualiza√ß√µes: $e');
      }

      // üõ°Ô∏è REGRA 5: Validar regras de neg√≥cio ap√≥s mudan√ßas
      _validateBusinessRules(existing);

      // ‚úÖ Salvar no repository
      final updated = await _repository.updateEmployee(existing);

      _logger.info('‚úÖ Funcion√°rio atualizado: ${updated.nome}');
      return updated;
    } catch (e) {
      _logger.severe('‚ùå Erro no service ao atualizar funcion√°rio $id: $e');
      rethrow;
    }
  }

  // üóëÔ∏è DELETAR - Com valida√ß√µes de neg√≥cio
  Future<bool> deleteEmployee(String id) async {
    try {
      _logger.info('üóëÔ∏è Deletando funcion√°rio: $id');

      // üõ°Ô∏è REGRA 1: Validar ID
      final idValidation = ValidationService.validateEmployeeId(id);
      if (!idValidation.isValid) {
        throw InvalidEmployeeDataException(
            'ID inv√°lido: ${idValidation.error}');
      }

      // üõ°Ô∏è REGRA 2: Buscar funcion√°rio para valida√ß√µes
      final existing = await _repository.getEmployeeById(id);
      if (existing == null) {
        throw EmployeeNotFoundException('Funcion√°rio $id n√£o encontrado');
      }

      // üõ°Ô∏è REGRA 3: Valida√ß√µes espec√≠ficas de neg√≥cio para exclus√£o
      // Exemplo: n√£o permitir deletar funcion√°rios com dados cr√≠ticos
      // if (existing.temDadosIoTVinculados) {
      //   throw BusinessRuleException('N√£o √© poss√≠vel deletar funcion√°rio com dados IoT ativos');
      // }

      // ‚úÖ Deletar do repository
      final deleted = await _repository.deleteEmployee(id);

      if (deleted) {
        _logger.info('‚úÖ Funcion√°rio deletado: $id');
      }

      return deleted;
    } catch (e) {
      _logger.severe('‚ùå Erro no service ao deletar funcion√°rio $id: $e');
      rethrow;
    }
  }

  // üìä OBTER ESTAT√çSTICAS - Para dashboard
  Future<Map<String, dynamic>> getStatistics() async {
    try {
      _logger.info('üìä Calculando estat√≠sticas de funcion√°rios');

      final stats = await _repository.getEmployeeStats();

      // üìä REGRA: Adicionar m√©tricas de neg√≥cio
      final employees = await _repository.getAllEmployees();

      // Distribui√ß√£o por setor
      final setorDistribution = <String, int>{};
      for (final emp in employees) {
        final setor = emp.setor.displayName;
        setorDistribution[setor] = (setorDistribution[setor] ?? 0) + 1;
      }

      // ‚úÖ CORRE√á√ÉO: Converter explicitamente para Map<String, dynamic>
      final result = <String, dynamic>{};
      stats.forEach((key, value) {
        result[key] = value;
      });

      // M√©tricas adicionais
      result['distribuicao_setores'] = setorDistribution;

      // ‚úÖ CORRE√á√ÉO: Usar nullable operator e verifica√ß√£o
      final totalFuncionarios = stats['total'];
      final funcionariosAtivos = stats['ativos'];

      if (totalFuncionarios != null &&
          funcionariosAtivos != null &&
          totalFuncionarios > 0) {
        result['taxa_ativacao'] =
            ((funcionariosAtivos / totalFuncionarios) * 100).round();
      } else {
        result['taxa_ativacao'] = 0;
      }

      _logger.info('üìä Estat√≠sticas calculadas: ${result.length} m√©tricas');
      return result;
    } catch (e) {
      _logger.severe('‚ùå Erro ao calcular estat√≠sticas: $e');
      rethrow;
    }
  }

  // üõ°Ô∏è VALIDA√á√ïES DE REGRAS DE NEG√ìCIO
  void _validateBusinessRules(Employee employee) {
    // REGRA: Funcion√°rios do setor de seguran√ßa devem estar sempre ativos
    if (employee.setor == Setor.seguranca && !employee.ativo) {
      throw BusinessRuleException(
          'Funcion√°rios do setor de Seguran√ßa devem estar sempre ativos');
    }

    // REGRA: Funcion√°rios com mais de 10 anos s√£o considerados especiais
    if (employee.tempoEmpresaAnos > 10) {
      _logger.info(
          '‚≠ê Funcion√°rio especial detectado: ${employee.nome} (${employee.tempoEmpresaAnos} anos)');
    }

    // Adicione mais regras conforme necess√°rio...
  }

  // üßπ CLEANUP
  void dispose() {
    _repository.dispose();
  }
}

// üö® EXCEPTIONS espec√≠ficas de neg√≥cio
class InvalidEmployeeDataException implements Exception {
  final String message;
  final String? details;

  InvalidEmployeeDataException(this.message, {this.details});

  @override
  String toString() =>
      'InvalidEmployeeDataException: $message${details != null ? ' ($details)' : ''}';
}

class DuplicateEmployeeException implements Exception {
  final String message;

  DuplicateEmployeeException(this.message);

  @override
  String toString() => 'DuplicateEmployeeException: $message';
}

class BusinessRuleException implements Exception {
  final String message;

  BusinessRuleException(this.message);

  @override
  String toString() => 'BusinessRuleException: $message';
}

class EmployeeNotFoundException implements Exception {
  final String message;

  EmployeeNotFoundException(this.message);

  @override
  String toString() => 'EmployeeNotFoundException: $message';
}
