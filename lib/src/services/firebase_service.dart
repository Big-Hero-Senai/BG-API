import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:logging/logging.dart';
import '../models/employee.dart';

// üî• SERVICE: Comunica√ß√£o com Firebase Firestore
class FirebaseService {
  static final _logger = Logger('FirebaseService');
  
  // üîß CONFIGURA√á√ÉO - ALTERE AQUI COM SEU PROJETO!
  static const String projectId = 'senai-monitoring-api';  // ‚úÖ CORRETO!
  static const String baseUrl = 'https://firestore.googleapis.com/v1';
  static const String collection = 'employees';
  
  // üìñ CONCEITO: Singleton Pattern (uma √∫nica inst√¢ncia)
  static final FirebaseService _instance = FirebaseService._internal();
  factory FirebaseService() => _instance;
  FirebaseService._internal();
  
  // üåê Cliente HTTP reutiliz√°vel
  final http.Client _client = http.Client();
  
  // üîó URLs do Firestore REST API
  String get _collectionUrl => '$baseUrl/projects/$projectId/databases/(default)/documents/$collection';
  String _documentUrl(String id) => '$_collectionUrl/$id';
  
  // üìã Headers padr√£o
  Map<String, String> get _headers => {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  };
  
  // üìñ CONCEITO: Converter Employee para formato Firebase
  Map<String, dynamic> _employeeToFirebaseFormat(Employee employee) {
    return {
      'fields': {
        'id': {'stringValue': employee.id},
        'nome': {'stringValue': employee.nome},
        'email': {'stringValue': employee.email},
        'setor': {'stringValue': employee.setor.name},
        'data_admissao': {'timestampValue': employee.dataAdmissao.toUtc().toIso8601String()},
        'ativo': {'booleanValue': employee.ativo},
        'created_at': {'timestampValue': DateTime.now().toUtc().toIso8601String()},
      }
    };
  }
  
  // üìñ CONCEITO: Converter formato Firebase para Employee
  Employee _firebaseFormatToEmployee(Map<String, dynamic> doc) {
    final fields = doc['fields'] as Map<String, dynamic>;
    
    return Employee.fromJson({
      'id': fields['id']?['stringValue'] ?? '',
      'nome': fields['nome']?['stringValue'] ?? '',
      'email': fields['email']?['stringValue'] ?? '',
      'setor': fields['setor']?['stringValue'] ?? '',
      'data_admissao': fields['data_admissao']?['timestampValue'] ?? '',
      'ativo': fields['ativo']?['booleanValue'] ?? true,
    });
  }
  
  // üîç LISTAR TODOS OS FUNCION√ÅRIOS
  Future<List<Employee>> getAllEmployees() async {
    try {
      _logger.info('üìã Buscando todos os funcion√°rios...');
      
      final response = await _client.get(
        Uri.parse(_collectionUrl),
        headers: _headers,
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final List<Employee> employees = [];
        
        if (data['documents'] != null) {
          for (final doc in data['documents']) {
            try {
              final employee = _firebaseFormatToEmployee(doc);
              employees.add(employee);
            } catch (e) {
              _logger.warning('‚ö†Ô∏è Erro ao parsear documento: $e');
            }
          }
        }
        
        _logger.info('‚úÖ ${employees.length} funcion√°rios encontrados');
        return employees;
      } else if (response.statusCode == 404) {
        _logger.info('üìã Nenhum funcion√°rio encontrado (cole√ß√£o vazia)');
        return [];
      } else {
        throw Exception('Erro HTTP ${response.statusCode}: ${response.body}');
      }
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar funcion√°rios: $e');
      rethrow;
    }
  }
  
  // üîç BUSCAR FUNCION√ÅRIO POR ID
  Future<Employee?> getEmployeeById(String id) async {
    try {
      _logger.info('üîç Buscando funcion√°rio: $id');
      
      final response = await _client.get(
        Uri.parse(_documentUrl(id)),
        headers: _headers,
      );
      
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final employee = _firebaseFormatToEmployee(data);
        _logger.info('‚úÖ Funcion√°rio encontrado: ${employee.nome}');
        return employee;
      } else if (response.statusCode == 404) {
        _logger.info('‚ùå Funcion√°rio n√£o encontrado: $id');
        return null;
      } else {
        throw Exception('Erro HTTP ${response.statusCode}: ${response.body}');
      }
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar funcion√°rio $id: $e');
      rethrow;
    }
  }
  
  // ‚ûï CRIAR NOVO FUNCION√ÅRIO
  Future<Employee> createEmployee(Employee employee) async {
    try {
      _logger.info('‚ûï Criando funcion√°rio: ${employee.nome}');
      
      // Verificar se j√° existe
      final existing = await getEmployeeById(employee.id);
      if (existing != null) {
        throw Exception('Funcion√°rio ${employee.id} j√° existe');
      }
      
      final firebaseData = _employeeToFirebaseFormat(employee);
      
      final response = await _client.patch(
        Uri.parse(_documentUrl(employee.id)),
        headers: _headers,
        body: jsonEncode(firebaseData),
      );
      
      if (response.statusCode == 200 || response.statusCode == 201) {
        _logger.info('‚úÖ Funcion√°rio criado: ${employee.nome}');
        return employee;
      } else {
        throw Exception('Erro HTTP ${response.statusCode}: ${response.body}');
      }
    } catch (e) {
      _logger.severe('‚ùå Erro ao criar funcion√°rio: $e');
      rethrow;
    }
  }
  
  // üîÑ ATUALIZAR FUNCION√ÅRIO
  Future<Employee> updateEmployee(Employee employee) async {
    try {
      _logger.info('üîÑ Atualizando funcion√°rio: ${employee.nome}');
      
      final firebaseData = _employeeToFirebaseFormat(employee);
      
      final response = await _client.patch(
        Uri.parse(_documentUrl(employee.id)),
        headers: _headers,
        body: jsonEncode(firebaseData),
      );
      
      if (response.statusCode == 200) {
        _logger.info('‚úÖ Funcion√°rio atualizado: ${employee.nome}');
        return employee;
      } else {
        throw Exception('Erro HTTP ${response.statusCode}: ${response.body}');
      }
    } catch (e) {
      _logger.severe('‚ùå Erro ao atualizar funcion√°rio: $e');
      rethrow;
    }
  }
  
  // üóëÔ∏è DELETAR FUNCION√ÅRIO
  Future<bool> deleteEmployee(String id) async {
    try {
      _logger.info('üóëÔ∏è Deletando funcion√°rio: $id');
      
      final response = await _client.delete(
        Uri.parse(_documentUrl(id)),
        headers: _headers,
      );
      
      if (response.statusCode == 200) {
        _logger.info('‚úÖ Funcion√°rio deletado: $id');
        return true;
      } else if (response.statusCode == 404) {
        _logger.warning('‚ö†Ô∏è Funcion√°rio n√£o encontrado para deletar: $id');
        return false;
      } else {
        throw Exception('Erro HTTP ${response.statusCode}: ${response.body}');
      }
    } catch (e) {
      _logger.severe('‚ùå Erro ao deletar funcion√°rio: $e');
      rethrow;
    }
  }
  
  // üß™ TESTAR CONEX√ÉO
  Future<bool> testConnection() async {
    try {
      _logger.info('üß™ Testando conex√£o com Firebase...');
      
      final response = await _client.get(
        Uri.parse(_collectionUrl),
        headers: _headers,
      );
      
      final success = response.statusCode == 200 || response.statusCode == 404;
      
      if (success) {
        _logger.info('‚úÖ Conex√£o com Firebase OK!');
      } else {
        _logger.severe('‚ùå Falha na conex√£o: ${response.statusCode}');
      }
      
      return success;
    } catch (e) {
      _logger.severe('‚ùå Erro de conex√£o: $e');
      return false;
    }
  }
  
  // üîß Cleanup
  void dispose() {
    _client.close();
  }
}