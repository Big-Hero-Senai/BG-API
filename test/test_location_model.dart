// üìÅ test/test_location_model.dart

import '../lib/src/models/location_data.dart';

void main() {
  print('üß™ Testando LocationData Model (vers√£o simplificada e corrigida)...\n');
  
  // 1. Teste b√°sico com coordenadas
  print('üìã 1. Teste b√°sico:');
  try {
    final locationData = LocationData(
      employeeId: 'EMP001',
      deviceId: 'DEVICE_001',
      timestamp: DateTime.now().toUtc(),
      latitude: '-3.7319',
      longitude: '-38.5267',
    );
    
    print('‚úÖ LocationData criado: ${locationData}');
    print('   Status: ${locationData.overallStatus.displayName}');
    print('   Coordenadas v√°lidas: ${locationData.hasValidCoordinates}');
    print('   Display: ${locationData.coordinatesDisplay}');
  } catch (e) {
    print('‚ùå Erro: $e');
  }
  
  // 2. Teste sem coordenadas
  print('\nüìã 2. Teste sem coordenadas:');
  try {
    final locationData = LocationData(
      employeeId: 'EMP002',
      deviceId: 'DEVICE_002',
      timestamp: DateTime.now().toUtc(),
      // Sem latitude/longitude
    );
    
    print('‚úÖ Sem coordenadas: ${locationData}');
    print('   Tem coordenadas: ${locationData.hasCoordinates}');
  } catch (e) {
    print('‚ùå Erro: $e');
  }
  
  // 3. Teste JSON
  print('\nüìã 3. Teste JSON:');
  try {
    final json = {
      'employee_id': 'EMP003',
      'device_id': 'DEVICE_003',
      'timestamp': DateTime.now().toUtc().toIso8601String(),
      'latitude': '-3.7500',
      'longitude': '-38.5500',
    };
    
    final locationData = LocationData.fromJson(json);
    print('‚úÖ Criado do JSON: ${locationData}');
    print('   Lat como double: ${locationData.latitudeAsDouble}');
    print('   Lon como double: ${locationData.longitudeAsDouble}');
    print('   JSON compacto: ${locationData.toJsonCompact()}');
  } catch (e) {
    print('‚ùå Erro JSON: $e');
  }
  
  // 4. Teste processamento
  print('\nüìã 4. Teste processamento:');
  try {
    final locationData = LocationData(
      employeeId: 'EMP004',
      deviceId: 'DEVICE_004',
      timestamp: DateTime.now().toUtc(),
      latitude: '-3.7000',
      longitude: '-38.5000',
    );
    
    // Simular processamento
    locationData.updateZone('setor_producao');
    locationData.addNote('Funcion√°rio entrou no setor de produ√ß√£o');
    
    print('‚úÖ Processado: ${locationData}');
    print('   Zona: ${locationData.processedZone}');
    print('   Processado: ${locationData.isProcessed}');
  } catch (e) {
    print('‚ùå Erro processamento: $e');
  }
  
  // 5. Teste c√°lculo de dist√¢ncia
  print('\nüìã 5. Teste dist√¢ncia:');
  try {
    final locationData = LocationData(
      employeeId: 'EMP005',
      deviceId: 'DEVICE_005',
      timestamp: DateTime.now().toUtc(),
      latitude: '-3.7319',
      longitude: '-38.5267',
    );
    
    // Calcular dist√¢ncia para outro ponto
    final distance = locationData.distanceToPoint('-3.7320', '-38.5268');
    print('‚úÖ Dist√¢ncia calculada: ${distance?.toStringAsFixed(2)} metros');
  } catch (e) {
    print('‚ùå Erro dist√¢ncia: $e');
  }
  
  // 6. Teste valida√ß√µes
  print('\nüìã 6. Teste valida√ß√µes:');
  try {
    print('‚ùå Deveria ter falhado!');
  } catch (e) {
    print('‚úÖ Valida√ß√£o funcionou: $e');
  }
  
  print('\nüéâ Testes do LocationData simplificado conclu√≠dos!');
}