// üìÅ lib/src/services/iot_service.dart

import 'package:logging/logging.dart';
import '../models/health_data.dart';
import '../models/location_data.dart';
import '../repositories/iot_repository.dart';
import '../services/employee_service.dart';

// üß† SERVICE: Regras de neg√≥cio para dados IoT
class IoTService {
  static final _logger = Logger('IoTService');
  
  final IoTRepository _iotRepository = IoTRepository();
  final EmployeeService _employeeService = EmployeeService();
  
  // üíì PROCESSAR DADOS DE SA√öDE
  Future<HealthData> processHealthData(Map<String, dynamic> jsonData) async {
    try {
      _logger.info('üíì Processando dados de sa√∫de IoT');
      
      // üõ°Ô∏è REGRA 1: Validar se funcion√°rio existe
      final employeeId = jsonData['employee_id']?.toString();
      if (employeeId != null) {
        final employee = await _employeeService.getEmployeeById(employeeId);
        if (employee == null) {
          throw EmployeeNotFoundException('Funcion√°rio $employeeId n√£o encontrado');
        }
      }
      
      // üõ°Ô∏è REGRA 2: Criar e validar HealthData
      final healthData = HealthData.fromJson(jsonData);
      
      // üõ°Ô∏è REGRA 3: Verificar alertas cr√≠ticos
      if (healthData.isCriticalAlert) {
        _logger.warning('üö® ALERTA CR√çTICO detectado para ${healthData.employeeId}');
        await _processHealthAlert(healthData);
      }
      
      // üõ°Ô∏è REGRA 4: Verificar bateria baixa do device
      if (healthData.isLowBattery) {
        _logger.warning('üîã Bateria baixa no device ${healthData.deviceId}');
        await _processBatteryAlert(healthData);
      }
      
      // ‚úÖ SALVAR no repository
      final saved = await _iotRepository.saveHealthData(healthData);
      
      // üìä REGRA 5: Atualizar estat√≠sticas em tempo real
      await _updateHealthStatistics(saved);
      
      _logger.info('‚úÖ Dados de sa√∫de processados: ${saved.employeeId}');
      return saved;
    } catch (e) {
      _logger.severe('‚ùå Erro ao processar dados de sa√∫de: $e');
      rethrow;
    }
  }
  
  // üó∫Ô∏è PROCESSAR DADOS DE LOCALIZA√á√ÉO
  Future<LocationData> processLocationData(Map<String, dynamic> jsonData) async {
    try {
      _logger.info('üó∫Ô∏è Processando dados de localiza√ß√£o IoT');
      
      // üõ°Ô∏è REGRA 1: Validar se funcion√°rio existe
      final employeeId = jsonData['employee_id']?.toString();
      if (employeeId != null) {
        final employee = await _employeeService.getEmployeeById(employeeId);
        if (employee == null) {
          throw EmployeeNotFoundException('Funcion√°rio $employeeId n√£o encontrado');
        }
      }
      
      // üõ°Ô∏è REGRA 2: Criar e validar LocationData
      final locationData = LocationData.fromJson(jsonData);
      
      // üõ°Ô∏è REGRA 3: Processar zona/setor baseado nas coordenadas
      if (locationData.hasValidCoordinates) {
        final zone = await _determineZoneFromCoordinates(locationData);
        if (zone != null) {
          locationData.updateZone(zone);
        }
      }
      
      // üõ°Ô∏è REGRA 4: Verificar se est√° em zona de seguran√ßa
      await _checkSafetyZone(locationData);
      
      // ‚úÖ SALVAR no repository
      final saved = await _iotRepository.saveLocationData(locationData);
      
      // üìä REGRA 5: Atualizar estat√≠sticas de localiza√ß√£o
      await _updateLocationStatistics(saved);
      
      _logger.info('‚úÖ Dados de localiza√ß√£o processados: ${saved.employeeId}');
      return saved;
    } catch (e) {
      _logger.severe('‚ùå Erro ao processar dados de localiza√ß√£o: $e');
      rethrow;
    }
  }
  
  // üìä PROCESSAR DADOS EM LOTE
  Future<Map<String, dynamic>> processBatchData(List<dynamic> jsonArray) async {
    try {
      _logger.info('üìä Processando ${jsonArray.length} itens em lote');
      
      int processed = 0;
      int errors = 0;
      final List<String> errorMessages = [];
      
      for (final item in jsonArray) {
        try {
          if (item is! Map<String, dynamic>) {
            throw ArgumentError('Item deve ser um objeto JSON');
          }
          
          final dataType = item['data_type']?.toString();
          
          switch (dataType) {
            case 'health':
              await processHealthData(item);
              break;
            case 'location':
              await processLocationData(item);
              break;
            default:
              // Tentar detectar automaticamente pelo conte√∫do
              if (item.containsKey('heart_rate') || item.containsKey('body_temperature')) {
                await processHealthData(item);
              } else if (item.containsKey('latitude') || item.containsKey('longitude')) {
                await processLocationData(item);
              } else {
                throw ArgumentError('Tipo de dados n√£o identificado');
              }
          }
          
          processed++;
        } catch (e) {
          errors++;
          errorMessages.add('Item ${jsonArray.indexOf(item)}: $e');
          _logger.warning('‚ö†Ô∏è Erro no item ${jsonArray.indexOf(item)}: $e');
        }
      }
      
      final result = {
        'total': jsonArray.length,
        'processed': processed,
        'errors': errors,
        'success_rate': processed / jsonArray.length,
        'error_messages': errorMessages,
        'timestamp': DateTime.now().toIso8601String(),
      };
      
      _logger.info('üìä Lote processado: $processed/$processed+$errors');
      return result;
    } catch (e) {
      _logger.severe('‚ùå Erro ao processar lote: $e');
      rethrow;
    }
  }
  
  // üîç BUSCAR √öLTIMOS DADOS DE SA√öDE
  Future<List<HealthData>> getLatestHealthData(String employeeId, {int limit = 10}) async {
    try {
      return await _iotRepository.getHealthDataByEmployee(employeeId, limit: limit);
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar dados de sa√∫de: $e');
      rethrow;
    }
  }
  
  // üó∫Ô∏è BUSCAR √öLTIMOS DADOS DE LOCALIZA√á√ÉO
  Future<List<LocationData>> getLatestLocationData(String employeeId, {int limit = 10}) async {
    try {
      return await _iotRepository.getLocationDataByEmployee(employeeId, limit: limit);
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar dados de localiza√ß√£o: $e');
      rethrow;
    }
  }
  
  // üìä ESTAT√çSTICAS IoT
  Future<Map<String, dynamic>> getIoTStatistics() async {
    try {
      _logger.info('üìä Calculando estat√≠sticas IoT');
      
      final healthStats = await _iotRepository.getHealthDataStats();
      final locationStats = await _iotRepository.getLocationDataStats();
      final alerts = await _iotRepository.getActiveAlertsCount();
      
      final stats = {
        'health_data': healthStats,
        'location_data': locationStats,
        'active_alerts': alerts,
        'devices_active': await _getActiveDevicesCount(),
        'last_24h': {
          'health_readings': await _iotRepository.getHealthDataCount(hours: 24),
          'location_readings': await _iotRepository.getLocationDataCount(hours: 24),
        },
        'timestamp': DateTime.now().toIso8601String(),
      };
      
      return stats;
    } catch (e) {
      _logger.severe('‚ùå Erro ao calcular estat√≠sticas IoT: $e');
      rethrow;
    }
  }
  
  // üö® BUSCAR ALERTAS ATIVOS
  Future<List<Map<String, dynamic>>> getActiveAlerts() async {
    try {
      return await _iotRepository.getActiveAlerts();
    } catch (e) {
      _logger.severe('‚ùå Erro ao buscar alertas ativos: $e');
      rethrow;
    }
  }
  
  // üõ°Ô∏è M√âTODOS PRIVADOS DE REGRAS DE NEG√ìCIO
  
  // üö® Processar alerta de sa√∫de cr√≠tico
  Future<void> _processHealthAlert(HealthData healthData) async {
    final alert = {
      'type': 'health_critical',
      'employee_id': healthData.employeeId,
      'device_id': healthData.deviceId,
      'details': {
        'heart_rate': healthData.heartRate,
        'body_temperature': healthData.bodyTemperature,
        'oxygen_saturation': healthData.oxygenSaturation,
      },
      'severity': 'high',
      'timestamp': healthData.timestamp.toIso8601String(),
      'status': 'active',
    };
    
    await _iotRepository.saveAlert(alert);
    
    // TODO: Enviar notifica√ß√£o para equipe m√©dica
    _logger.warning('üö® Alerta cr√≠tico criado para ${healthData.employeeId}');
  }
  
  // üîã Processar alerta de bateria baixa
  Future<void> _processBatteryAlert(HealthData healthData) async {
    final alert = {
      'type': 'battery_low',
      'employee_id': healthData.employeeId,
      'device_id': healthData.deviceId,
      'battery_level': healthData.batteryLevel,
      'severity': 'medium',
      'timestamp': healthData.timestamp.toIso8601String(),
      'status': 'active',
    };
    
    await _iotRepository.saveAlert(alert);
  }
  
  // üó∫Ô∏è Determinar zona baseada em coordenadas
  Future<String?> _determineZoneFromCoordinates(LocationData locationData) async {
    // üìç REGRA DE NEG√ìCIO: Mapear coordenadas para setores da f√°brica
    // Exemplo simplificado - em produ√ß√£o seria mais complexo
    
    final lat = locationData.latitudeAsDouble;
    final lon = locationData.longitudeAsDouble;
    
    if (lat == null || lon == null) return null;
    
    // Exemplo de zonas da f√°brica SENAI (coordenadas fict√≠cias)
    if (lat >= -3.7320 && lat <= -3.7300 && lon >= -38.5270 && lon <= -38.5250) {
      return 'setor_producao';
    } else if (lat >= -3.7340 && lat <= -3.7320 && lon >= -38.5290 && lon <= -38.5270) {
      return 'almoxarifado';
    } else if (lat >= -3.7300 && lat <= -3.7280 && lon >= -38.5250 && lon <= -38.5230) {
      return 'administrativo';
    }
    
    return 'area_externa';
  }
  
  // üõ°Ô∏è Verificar zona de seguran√ßa
  Future<void> _checkSafetyZone(LocationData locationData) async {
    final zone = locationData.processedZone;
    
    // REGRA: Algumas zonas s√£o restritas ou perigosas
    if (zone != null) {
      if (zone.contains('perigo') || zone.contains('restrito')) {
        locationData.alertLevel = 'danger';
        
        final alert = {
          'type': 'unsafe_zone',
          'employee_id': locationData.employeeId,
          'zone': zone,
          'coordinates': locationData.coordinatesDisplay,
          'severity': 'high',
          'timestamp': locationData.timestamp.toIso8601String(),
          'status': 'active',
        };
        
        await _iotRepository.saveAlert(alert);
      }
    }
  }
  
  // üìä Atualizar estat√≠sticas de sa√∫de
  Future<void> _updateHealthStatistics(HealthData healthData) async {
    // Aqui poderiamos atualizar m√©tricas em tempo real
    // Por exemplo: m√©dia de batimentos por setor, tend√™ncias, etc.
  }
  
  // üìä Atualizar estat√≠sticas de localiza√ß√£o
  Future<void> _updateLocationStatistics(LocationData locationData) async {
    // Aqui poderiamos atualizar heat maps, zonas mais visitadas, etc.
  }
  
  // üì± Contar devices ativos
  Future<int> _getActiveDevicesCount() async {
    try {
      return await _iotRepository.getActiveDevicesCount();
    } catch (e) {
      _logger.warning('‚ö†Ô∏è Erro ao contar devices ativos: $e');
      return 0;
    }
  }
  
  // üßπ CLEANUP
  void dispose() {
    _iotRepository.dispose();
    _logger.info('üßπ IoTService disposed');
  }
}

// üö® EXCEPTIONS espec√≠ficas de IoT
class EmployeeNotFoundException implements Exception {
  final String message;
  EmployeeNotFoundException(this.message);
  
  @override
  String toString() => 'EmployeeNotFoundException: $message';
}

class DeviceNotFoundException implements Exception {
  final String message;
  DeviceNotFoundException(this.message);
  
  @override
  String toString() => 'DeviceNotFoundException: $message';
}

/*
üéì CONCEITOS DO IOT SERVICE:

1. üß† **Business Rules for IoT**
   - Valida√ß√£o de employee existe
   - Processamento de zonas geogr√°ficas
   - Sistema de alertas autom√°tico

2. üõ°Ô∏è **Real-time Safety**
   - Detec√ß√£o de alertas cr√≠ticos
   - Zonas de seguran√ßa
   - Notifica√ß√µes autom√°ticas

3. üìä **Batch Processing**
   - Processamento eficiente em lote
   - Error handling individual
   - Estat√≠sticas de sucesso

4. üîç **Data Intelligence**
   - Mapeamento coordenadas ‚Üí zonas
   - An√°lise de padr√µes
   - M√©tricas em tempo real

5. üö® **Alert System**
   - Alertas de sa√∫de cr√≠ticos
   - Zonas perigosas
   - Bateria baixa

6. üìà **Analytics Integration**
   - Estat√≠sticas agregadas
   - Contadores em tempo real
   - Historical data analysis
*/